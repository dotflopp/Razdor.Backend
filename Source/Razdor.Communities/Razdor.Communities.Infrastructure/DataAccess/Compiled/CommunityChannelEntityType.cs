// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using MongoDB.EntityFrameworkCore.Storage;
using Razdor.Communities.Domain.Channels;
using Razdor.Shared.Domain;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Razdor.Communities.Infrastructure.DataAccess
{
    [EntityFrameworkInternal]
    public partial class CommunityChannelEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Razdor.Communities.Domain.Channels.CommunityChannel",
                typeof(CommunityChannel),
                baseEntityType,
                discriminatorProperty: "Type",
                derivedTypesCount: 2,
                propertyCount: 6,
                unnamedIndexCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(ulong),
                propertyInfo: typeof(BaseSnowflakeEntity).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BaseSnowflakeEntity).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0ul);
            id.SetGetter(
                ulong (CommunityChannel entity) => BaseSnowflakeEntityUnsafeAccessors.Id(entity),
                bool (CommunityChannel entity) => BaseSnowflakeEntityUnsafeAccessors.Id(entity) == 0UL,
                ulong (CommunityChannel instance) => BaseSnowflakeEntityUnsafeAccessors.Id(instance),
                bool (CommunityChannel instance) => BaseSnowflakeEntityUnsafeAccessors.Id(instance) == 0UL);
            id.SetSetter(
                (CommunityChannel entity, ulong value) => BaseSnowflakeEntityUnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (CommunityChannel entity, ulong value) => BaseSnowflakeEntityUnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                ulong (InternalEntityEntry entry) => BaseSnowflakeEntityUnsafeAccessors.Id(((CommunityChannel)(entry.Entity))),
                ulong (InternalEntityEntry entry) => BaseSnowflakeEntityUnsafeAccessors.Id(((CommunityChannel)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(id, 0),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            id.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(id));
            id.AddAnnotation("Mongo:ElementName", "_id");

            var communityId = runtimeEntityType.AddProperty(
                "CommunityId",
                typeof(ulong),
                propertyInfo: typeof(CommunityChannel).GetProperty("CommunityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CommunityChannel).GetField("<CommunityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0ul);
            communityId.SetGetter(
                ulong (CommunityChannel entity) => CommunityChannelUnsafeAccessors.CommunityId(entity),
                bool (CommunityChannel entity) => CommunityChannelUnsafeAccessors.CommunityId(entity) == 0UL,
                ulong (CommunityChannel instance) => CommunityChannelUnsafeAccessors.CommunityId(instance),
                bool (CommunityChannel instance) => CommunityChannelUnsafeAccessors.CommunityId(instance) == 0UL);
            communityId.SetSetter(
                (CommunityChannel entity, ulong value) => CommunityChannelUnsafeAccessors.CommunityId(entity) = value);
            communityId.SetMaterializationSetter(
                (CommunityChannel entity, ulong value) => CommunityChannelUnsafeAccessors.CommunityId(entity) = value);
            communityId.SetAccessors(
                ulong (InternalEntityEntry entry) => CommunityChannelUnsafeAccessors.CommunityId(((CommunityChannel)(entry.Entity))),
                ulong (InternalEntityEntry entry) => CommunityChannelUnsafeAccessors.CommunityId(((CommunityChannel)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(communityId, 1),
                ulong (InternalEntityEntry entry) => entry.GetCurrentValue<ulong>(communityId),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            communityId.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            communityId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));

            var name = runtimeEntityType.AddProperty(
                "Name",
                typeof(string),
                propertyInfo: typeof(CommunityChannel).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CommunityChannel).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            name.SetGetter(
                string (CommunityChannel entity) => CommunityChannelUnsafeAccessors.Name(entity),
                bool (CommunityChannel entity) => CommunityChannelUnsafeAccessors.Name(entity) == null,
                string (CommunityChannel instance) => CommunityChannelUnsafeAccessors.Name(instance),
                bool (CommunityChannel instance) => CommunityChannelUnsafeAccessors.Name(instance) == null);
            name.SetSetter(
                (CommunityChannel entity, string value) => CommunityChannelUnsafeAccessors.Name(entity) = value);
            name.SetMaterializationSetter(
                (CommunityChannel entity, string value) => CommunityChannelUnsafeAccessors.Name(entity) = value);
            name.SetAccessors(
                string (InternalEntityEntry entry) => CommunityChannelUnsafeAccessors.Name(((CommunityChannel)(entry.Entity))),
                string (InternalEntityEntry entry) => CommunityChannelUnsafeAccessors.Name(((CommunityChannel)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(name, 2),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(name),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            name.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            name.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string));

            var parentId = runtimeEntityType.AddProperty(
                "ParentId",
                typeof(ulong),
                propertyInfo: typeof(CommunityChannel).GetProperty("ParentId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CommunityChannel).GetField("<ParentId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0ul);
            parentId.SetGetter(
                ulong (CommunityChannel entity) => CommunityChannelUnsafeAccessors.ParentId(entity),
                bool (CommunityChannel entity) => CommunityChannelUnsafeAccessors.ParentId(entity) == 0UL,
                ulong (CommunityChannel instance) => CommunityChannelUnsafeAccessors.ParentId(instance),
                bool (CommunityChannel instance) => CommunityChannelUnsafeAccessors.ParentId(instance) == 0UL);
            parentId.SetSetter(
                (CommunityChannel entity, ulong value) => CommunityChannelUnsafeAccessors.ParentId(entity) = value);
            parentId.SetMaterializationSetter(
                (CommunityChannel entity, ulong value) => CommunityChannelUnsafeAccessors.ParentId(entity) = value);
            parentId.SetAccessors(
                ulong (InternalEntityEntry entry) => CommunityChannelUnsafeAccessors.ParentId(((CommunityChannel)(entry.Entity))),
                ulong (InternalEntityEntry entry) => CommunityChannelUnsafeAccessors.ParentId(((CommunityChannel)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(parentId, 3),
                ulong (InternalEntityEntry entry) => entry.GetCurrentValue<ulong>(parentId),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            parentId.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            parentId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));

            var position = runtimeEntityType.AddProperty(
                "Position",
                typeof(uint),
                propertyInfo: typeof(CommunityChannel).GetProperty("Position", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CommunityChannel).GetField("<Position>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            position.SetGetter(
                uint (CommunityChannel entity) => CommunityChannelUnsafeAccessors.Position(entity),
                bool (CommunityChannel entity) => CommunityChannelUnsafeAccessors.Position(entity) == 0U,
                uint (CommunityChannel instance) => CommunityChannelUnsafeAccessors.Position(instance),
                bool (CommunityChannel instance) => CommunityChannelUnsafeAccessors.Position(instance) == 0U);
            position.SetSetter(
                (CommunityChannel entity, uint value) => CommunityChannelUnsafeAccessors.Position(entity) = value);
            position.SetMaterializationSetter(
                (CommunityChannel entity, uint value) => CommunityChannelUnsafeAccessors.Position(entity) = value);
            position.SetAccessors(
                uint (InternalEntityEntry entry) => CommunityChannelUnsafeAccessors.Position(((CommunityChannel)(entry.Entity))),
                uint (InternalEntityEntry entry) => CommunityChannelUnsafeAccessors.Position(((CommunityChannel)(entry.Entity))),
                uint (InternalEntityEntry entry) => entry.ReadOriginalValue<uint>(position, 4),
                uint (InternalEntityEntry entry) => entry.GetCurrentValue<uint>(position),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            position.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            position.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                clrType: typeof(uint));

            var type = runtimeEntityType.AddProperty(
                "Type",
                typeof(ChannelType),
                propertyInfo: typeof(CommunityChannel).GetProperty("Type", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CommunityChannel).GetField("<Type>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGeneratorFactory: new DiscriminatorValueGeneratorFactory().Create,
                sentinel: (ChannelType)0);
            type.SetGetter(
                ChannelType (CommunityChannel entity) => CommunityChannelUnsafeAccessors.Type(entity),
                bool (CommunityChannel entity) => object.Equals(((object)(CommunityChannelUnsafeAccessors.Type(entity))), ((object)((ChannelType)0L))),
                ChannelType (CommunityChannel instance) => CommunityChannelUnsafeAccessors.Type(instance),
                bool (CommunityChannel instance) => object.Equals(((object)(CommunityChannelUnsafeAccessors.Type(instance))), ((object)((ChannelType)0L))));
            type.SetSetter(
                (CommunityChannel entity, ChannelType value) => CommunityChannelUnsafeAccessors.Type(entity) = value);
            type.SetMaterializationSetter(
                (CommunityChannel entity, ChannelType value) => CommunityChannelUnsafeAccessors.Type(entity) = value);
            type.SetAccessors(
                ChannelType (InternalEntityEntry entry) => CommunityChannelUnsafeAccessors.Type(((CommunityChannel)(entry.Entity))),
                ChannelType (InternalEntityEntry entry) => CommunityChannelUnsafeAccessors.Type(((CommunityChannel)(entry.Entity))),
                ChannelType (InternalEntityEntry entry) => entry.ReadOriginalValue<ChannelType>(type, 5),
                ChannelType (InternalEntityEntry entry) => entry.GetCurrentValue<ChannelType>(type),
                object (ValueBuffer valueBuffer) => valueBuffer[5]);
            type.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            type.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ChannelType>(
                    bool (ChannelType v1, ChannelType v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (ChannelType v) => ((object)v).GetHashCode(),
                    ChannelType (ChannelType v) => v),
                keyComparer: new ValueComparer<ChannelType>(
                    bool (ChannelType v1, ChannelType v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (ChannelType v) => ((object)v).GetHashCode(),
                    ChannelType (ChannelType v) => v),
                providerValueComparer: new ValueComparer<ChannelType>(
                    bool (ChannelType v1, ChannelType v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (ChannelType v) => ((object)v).GetHashCode(),
                    ChannelType (ChannelType v) => v),
                clrType: typeof(ChannelType));

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { communityId });

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var communityId = runtimeEntityType.FindProperty("CommunityId");
            var name = runtimeEntityType.FindProperty("Name");
            var parentId = runtimeEntityType.FindProperty("ParentId");
            var position = runtimeEntityType.FindProperty("Position");
            var type = runtimeEntityType.FindProperty("Type");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<ulong>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<ulong>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((CommunityChannel)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, ulong, string, ulong, uint, ChannelType>(((ValueComparer<ulong>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)), ((ValueComparer<ulong>)(((IProperty)communityId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(communityId)), (source.GetCurrentValue<string>(name) == null ? null : ((ValueComparer<string>)(((IProperty)name).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(name))), ((ValueComparer<ulong>)(((IProperty)parentId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(parentId)), ((ValueComparer<uint>)(((IProperty)position).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(position)), ((ValueComparer<ChannelType>)(((IProperty)type).GetValueComparer())).Snapshot(source.GetCurrentValue<ChannelType>(type)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => Snapshot.Empty);
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((CommunityChannel)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong>(((ValueComparer<ulong>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 6,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 6,
                shadowCount: 0,
                relationshipCount: 1,
                storeGeneratedCount: 0);
            runtimeEntityType.AddAnnotation("DiscriminatorMappingComplete", false);
            runtimeEntityType.AddAnnotation("Mongo:CollectionName", "channels");

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
