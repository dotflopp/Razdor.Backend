// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using MongoDB.EntityFrameworkCore.Storage;
using Razdor.Communities.Domain;
using Razdor.Shared.Domain;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Razdor.Communities.Infrastructure.DataAccess
{
    [EntityFrameworkInternal]
    public partial class CommunityEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Razdor.Communities.Domain.Community",
                typeof(Community),
                baseEntityType,
                propertyCount: 5,
                navigationCount: 3,
                unnamedIndexCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(ulong),
                propertyInfo: typeof(BaseSnowflakeEntity).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BaseSnowflakeEntity).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0ul);
            id.SetGetter(
                ulong (Community entity) => BaseSnowflakeEntityUnsafeAccessors.Id(entity),
                bool (Community entity) => BaseSnowflakeEntityUnsafeAccessors.Id(entity) == 0UL,
                ulong (Community instance) => BaseSnowflakeEntityUnsafeAccessors.Id(instance),
                bool (Community instance) => BaseSnowflakeEntityUnsafeAccessors.Id(instance) == 0UL);
            id.SetSetter(
                (Community entity, ulong value) => BaseSnowflakeEntityUnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (Community entity, ulong value) => BaseSnowflakeEntityUnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                ulong (InternalEntityEntry entry) => BaseSnowflakeEntityUnsafeAccessors.Id(((Community)(entry.Entity))),
                ulong (InternalEntityEntry entry) => BaseSnowflakeEntityUnsafeAccessors.Id(((Community)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(id, 0),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            id.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(id));
            id.AddAnnotation("Mongo:ElementName", "_id");

            var defaultNotificationPolicy = runtimeEntityType.AddProperty(
                "DefaultNotificationPolicy",
                typeof(CommunityNotificationPolicy),
                propertyInfo: typeof(Community).GetProperty("DefaultNotificationPolicy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Community).GetField("<DefaultNotificationPolicy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: CommunityNotificationPolicy.All);
            defaultNotificationPolicy.SetGetter(
                CommunityNotificationPolicy (Community entity) => CommunityUnsafeAccessors.DefaultNotificationPolicy(entity),
                bool (Community entity) => object.Equals(((object)(CommunityUnsafeAccessors.DefaultNotificationPolicy(entity))), ((object)(CommunityNotificationPolicy.All))),
                CommunityNotificationPolicy (Community instance) => CommunityUnsafeAccessors.DefaultNotificationPolicy(instance),
                bool (Community instance) => object.Equals(((object)(CommunityUnsafeAccessors.DefaultNotificationPolicy(instance))), ((object)(CommunityNotificationPolicy.All))));
            defaultNotificationPolicy.SetSetter(
                (Community entity, CommunityNotificationPolicy value) => CommunityUnsafeAccessors.DefaultNotificationPolicy(entity) = value);
            defaultNotificationPolicy.SetMaterializationSetter(
                (Community entity, CommunityNotificationPolicy value) => CommunityUnsafeAccessors.DefaultNotificationPolicy(entity) = value);
            defaultNotificationPolicy.SetAccessors(
                CommunityNotificationPolicy (InternalEntityEntry entry) => CommunityUnsafeAccessors.DefaultNotificationPolicy(((Community)(entry.Entity))),
                CommunityNotificationPolicy (InternalEntityEntry entry) => CommunityUnsafeAccessors.DefaultNotificationPolicy(((Community)(entry.Entity))),
                CommunityNotificationPolicy (InternalEntityEntry entry) => entry.ReadOriginalValue<CommunityNotificationPolicy>(defaultNotificationPolicy, 1),
                CommunityNotificationPolicy (InternalEntityEntry entry) => entry.GetCurrentValue<CommunityNotificationPolicy>(defaultNotificationPolicy),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            defaultNotificationPolicy.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            defaultNotificationPolicy.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<CommunityNotificationPolicy>(
                    bool (CommunityNotificationPolicy v1, CommunityNotificationPolicy v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (CommunityNotificationPolicy v) => ((object)v).GetHashCode(),
                    CommunityNotificationPolicy (CommunityNotificationPolicy v) => v),
                keyComparer: new ValueComparer<CommunityNotificationPolicy>(
                    bool (CommunityNotificationPolicy v1, CommunityNotificationPolicy v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (CommunityNotificationPolicy v) => ((object)v).GetHashCode(),
                    CommunityNotificationPolicy (CommunityNotificationPolicy v) => v),
                providerValueComparer: new ValueComparer<CommunityNotificationPolicy>(
                    bool (CommunityNotificationPolicy v1, CommunityNotificationPolicy v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (CommunityNotificationPolicy v) => ((object)v).GetHashCode(),
                    CommunityNotificationPolicy (CommunityNotificationPolicy v) => v),
                clrType: typeof(CommunityNotificationPolicy));

            var description = runtimeEntityType.AddProperty(
                "Description",
                typeof(string),
                propertyInfo: typeof(Community).GetProperty("Description", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Community).GetField("<Description>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 400);
            description.SetGetter(
                string (Community entity) => CommunityUnsafeAccessors.Description(entity),
                bool (Community entity) => CommunityUnsafeAccessors.Description(entity) == null,
                string (Community instance) => CommunityUnsafeAccessors.Description(instance),
                bool (Community instance) => CommunityUnsafeAccessors.Description(instance) == null);
            description.SetSetter(
                (Community entity, string value) => CommunityUnsafeAccessors.Description(entity) = value);
            description.SetMaterializationSetter(
                (Community entity, string value) => CommunityUnsafeAccessors.Description(entity) = value);
            description.SetAccessors(
                string (InternalEntityEntry entry) => CommunityUnsafeAccessors.Description(((Community)(entry.Entity))),
                string (InternalEntityEntry entry) => CommunityUnsafeAccessors.Description(((Community)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(description, 2),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(description),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            description.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            description.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string));

            var name = runtimeEntityType.AddProperty(
                "Name",
                typeof(string),
                propertyInfo: typeof(Community).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Community).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 100);
            name.SetGetter(
                string (Community entity) => CommunityUnsafeAccessors.Name(entity),
                bool (Community entity) => CommunityUnsafeAccessors.Name(entity) == null,
                string (Community instance) => CommunityUnsafeAccessors.Name(instance),
                bool (Community instance) => CommunityUnsafeAccessors.Name(instance) == null);
            name.SetSetter(
                (Community entity, string value) => CommunityUnsafeAccessors.Name(entity) = value);
            name.SetMaterializationSetter(
                (Community entity, string value) => CommunityUnsafeAccessors.Name(entity) = value);
            name.SetAccessors(
                string (InternalEntityEntry entry) => CommunityUnsafeAccessors.Name(((Community)(entry.Entity))),
                string (InternalEntityEntry entry) => CommunityUnsafeAccessors.Name(((Community)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(name, 3),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(name),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            name.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            name.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string));

            var ownerId = runtimeEntityType.AddProperty(
                "OwnerId",
                typeof(ulong),
                propertyInfo: typeof(Community).GetProperty("OwnerId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Community).GetField("<OwnerId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0ul);
            ownerId.SetGetter(
                ulong (Community entity) => CommunityUnsafeAccessors.OwnerId(entity),
                bool (Community entity) => CommunityUnsafeAccessors.OwnerId(entity) == 0UL,
                ulong (Community instance) => CommunityUnsafeAccessors.OwnerId(instance),
                bool (Community instance) => CommunityUnsafeAccessors.OwnerId(instance) == 0UL);
            ownerId.SetSetter(
                (Community entity, ulong value) => CommunityUnsafeAccessors.OwnerId(entity) = value);
            ownerId.SetMaterializationSetter(
                (Community entity, ulong value) => CommunityUnsafeAccessors.OwnerId(entity) = value);
            ownerId.SetAccessors(
                ulong (InternalEntityEntry entry) => CommunityUnsafeAccessors.OwnerId(((Community)(entry.Entity))),
                ulong (InternalEntityEntry entry) => CommunityUnsafeAccessors.OwnerId(((Community)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(ownerId, 4),
                ulong (InternalEntityEntry entry) => entry.GetCurrentValue<ulong>(ownerId),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            ownerId.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            ownerId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { ownerId });

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var defaultNotificationPolicy = runtimeEntityType.FindProperty("DefaultNotificationPolicy");
            var description = runtimeEntityType.FindProperty("Description");
            var name = runtimeEntityType.FindProperty("Name");
            var ownerId = runtimeEntityType.FindProperty("OwnerId");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<ulong>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<ulong>(key));
            var avatar = runtimeEntityType.FindNavigation("Avatar");
            var everyone = runtimeEntityType.FindNavigation("Everyone");
            var _roles = runtimeEntityType.FindNavigation("_roles");
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((Community)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, CommunityNotificationPolicy, string, string, ulong>(((ValueComparer<ulong>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)), ((ValueComparer<CommunityNotificationPolicy>)(((IProperty)defaultNotificationPolicy).GetValueComparer())).Snapshot(source.GetCurrentValue<CommunityNotificationPolicy>(defaultNotificationPolicy)), (source.GetCurrentValue<string>(description) == null ? null : ((ValueComparer<string>)(((IProperty)description).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(description))), (source.GetCurrentValue<string>(name) == null ? null : ((ValueComparer<string>)(((IProperty)name).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(name))), ((ValueComparer<ulong>)(((IProperty)ownerId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(ownerId)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => Snapshot.Empty);
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((Community)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, object, object, object>(((ValueComparer<ulong>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)), CommunityUnsafeAccessors.Avatar(entity), CommunityUnsafeAccessors.Everyone(entity), SnapshotFactoryFactory.SnapshotCollection(CommunityUnsafeAccessors._roles(entity)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 5,
                navigationCount: 3,
                complexPropertyCount: 0,
                originalValueCount: 5,
                shadowCount: 0,
                relationshipCount: 4,
                storeGeneratedCount: 0);
            runtimeEntityType.AddAnnotation("Mongo:CollectionName", "communities");

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
