// <auto-generated />
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MongoDB.EntityFrameworkCore.Storage;
using Razdor.Communities.Domain;
using Razdor.Communities.Domain.Members;
using Razdor.Communities.Infrastructure.DataAccess.TypeConverters;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Razdor.Communities.Infrastructure.DataAccess
{
    [EntityFrameworkInternal]
    public partial class CommunityMemberEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Razdor.Communities.Domain.Members.CommunityMember",
                typeof(CommunityMember),
                baseEntityType,
                propertyCount: 5,
                navigationCount: 1,
                keyCount: 1);

            var communityId = runtimeEntityType.AddProperty(
                "CommunityId",
                typeof(ulong),
                propertyInfo: typeof(CommunityMember).GetProperty("CommunityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CommunityMember).GetField("<CommunityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0ul);
            communityId.SetGetter(
                ulong (CommunityMember entity) => CommunityMemberUnsafeAccessors.CommunityId(entity),
                bool (CommunityMember entity) => CommunityMemberUnsafeAccessors.CommunityId(entity) == 0UL,
                ulong (CommunityMember instance) => CommunityMemberUnsafeAccessors.CommunityId(instance),
                bool (CommunityMember instance) => CommunityMemberUnsafeAccessors.CommunityId(instance) == 0UL);
            communityId.SetSetter(
                (CommunityMember entity, ulong value) => CommunityMemberUnsafeAccessors.CommunityId(entity) = value);
            communityId.SetMaterializationSetter(
                (CommunityMember entity, ulong value) => CommunityMemberUnsafeAccessors.CommunityId(entity) = value);
            communityId.SetAccessors(
                ulong (InternalEntityEntry entry) => CommunityMemberUnsafeAccessors.CommunityId(((CommunityMember)(entry.Entity))),
                ulong (InternalEntityEntry entry) => CommunityMemberUnsafeAccessors.CommunityId(((CommunityMember)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(communityId, 0),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(communityId, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            communityId.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            communityId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));
            communityId.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(communityId));

            var userId = runtimeEntityType.AddProperty(
                "UserId",
                typeof(ulong),
                propertyInfo: typeof(CommunityMember).GetProperty("UserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CommunityMember).GetField("<UserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0ul);
            userId.SetGetter(
                ulong (CommunityMember entity) => CommunityMemberUnsafeAccessors.UserId(entity),
                bool (CommunityMember entity) => CommunityMemberUnsafeAccessors.UserId(entity) == 0UL,
                ulong (CommunityMember instance) => CommunityMemberUnsafeAccessors.UserId(instance),
                bool (CommunityMember instance) => CommunityMemberUnsafeAccessors.UserId(instance) == 0UL);
            userId.SetSetter(
                (CommunityMember entity, ulong value) => CommunityMemberUnsafeAccessors.UserId(entity) = value);
            userId.SetMaterializationSetter(
                (CommunityMember entity, ulong value) => CommunityMemberUnsafeAccessors.UserId(entity) = value);
            userId.SetAccessors(
                ulong (InternalEntityEntry entry) => CommunityMemberUnsafeAccessors.UserId(((CommunityMember)(entry.Entity))),
                ulong (InternalEntityEntry entry) => CommunityMemberUnsafeAccessors.UserId(((CommunityMember)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(userId, 1),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(userId, 1),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            userId.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: 1,
                storeGenerationIndex: -1);
            userId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));
            userId.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(userId));

            var joiningDate = runtimeEntityType.AddProperty(
                "JoiningDate",
                typeof(DateTimeOffset),
                propertyInfo: typeof(CommunityMember).GetProperty("JoiningDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CommunityMember).GetField("<JoiningDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new DatetimeOffsetConverter());
            joiningDate.SetGetter(
                DateTimeOffset (CommunityMember entity) => CommunityMemberUnsafeAccessors.JoiningDate(entity),
                bool (CommunityMember entity) => CommunityMemberUnsafeAccessors.JoiningDate(entity).EqualsExact(default(DateTimeOffset)),
                DateTimeOffset (CommunityMember instance) => CommunityMemberUnsafeAccessors.JoiningDate(instance),
                bool (CommunityMember instance) => CommunityMemberUnsafeAccessors.JoiningDate(instance).EqualsExact(default(DateTimeOffset)));
            joiningDate.SetSetter(
                (CommunityMember entity, DateTimeOffset value) => CommunityMemberUnsafeAccessors.JoiningDate(entity) = value);
            joiningDate.SetMaterializationSetter(
                (CommunityMember entity, DateTimeOffset value) => CommunityMemberUnsafeAccessors.JoiningDate(entity) = value);
            joiningDate.SetAccessors(
                DateTimeOffset (InternalEntityEntry entry) => CommunityMemberUnsafeAccessors.JoiningDate(((CommunityMember)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => CommunityMemberUnsafeAccessors.JoiningDate(((CommunityMember)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset>(joiningDate, 2),
                DateTimeOffset (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset>(joiningDate),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            joiningDate.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            joiningDate.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                converter: new ValueConverter<DateTimeOffset, string>(
                    string (DateTimeOffset value) => value.ToString("o"),
                    DateTimeOffset (string value) => DateTimeOffset.ParseExact(value, "o", CultureInfo.InvariantCulture)));
            joiningDate.SetSentinelFromProviderValue("0001-01-01T00:00:00.0000000+00:00");

            var notificationPolicy = runtimeEntityType.AddProperty(
                "NotificationPolicy",
                typeof(CommunityNotificationPolicy?),
                propertyInfo: typeof(CommunityMember).GetProperty("NotificationPolicy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CommunityMember).GetField("<NotificationPolicy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            notificationPolicy.SetGetter(
                CommunityNotificationPolicy? (CommunityMember entity) => CommunityMemberUnsafeAccessors.NotificationPolicy(entity),
                bool (CommunityMember entity) => !(CommunityMemberUnsafeAccessors.NotificationPolicy(entity).HasValue),
                CommunityNotificationPolicy? (CommunityMember instance) => CommunityMemberUnsafeAccessors.NotificationPolicy(instance),
                bool (CommunityMember instance) => !(CommunityMemberUnsafeAccessors.NotificationPolicy(instance).HasValue));
            notificationPolicy.SetSetter(
                (CommunityMember entity, CommunityNotificationPolicy? value) => CommunityMemberUnsafeAccessors.NotificationPolicy(entity) = (value == null ? value : ((CommunityNotificationPolicy? )(((CommunityNotificationPolicy)(value))))));
            notificationPolicy.SetMaterializationSetter(
                (CommunityMember entity, CommunityNotificationPolicy? value) => CommunityMemberUnsafeAccessors.NotificationPolicy(entity) = (value == null ? value : ((CommunityNotificationPolicy? )(((CommunityNotificationPolicy)(value))))));
            notificationPolicy.SetAccessors(
                CommunityNotificationPolicy? (InternalEntityEntry entry) => CommunityMemberUnsafeAccessors.NotificationPolicy(((CommunityMember)(entry.Entity))),
                CommunityNotificationPolicy? (InternalEntityEntry entry) => CommunityMemberUnsafeAccessors.NotificationPolicy(((CommunityMember)(entry.Entity))),
                CommunityNotificationPolicy? (InternalEntityEntry entry) => entry.ReadOriginalValue<CommunityNotificationPolicy?>(notificationPolicy, 3),
                CommunityNotificationPolicy? (InternalEntityEntry entry) => entry.GetCurrentValue<CommunityNotificationPolicy?>(notificationPolicy),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            notificationPolicy.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            notificationPolicy.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<CommunityNotificationPolicy>(
                    bool (CommunityNotificationPolicy v1, CommunityNotificationPolicy v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (CommunityNotificationPolicy v) => ((object)v).GetHashCode(),
                    CommunityNotificationPolicy (CommunityNotificationPolicy v) => v),
                keyComparer: new ValueComparer<CommunityNotificationPolicy>(
                    bool (CommunityNotificationPolicy v1, CommunityNotificationPolicy v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (CommunityNotificationPolicy v) => ((object)v).GetHashCode(),
                    CommunityNotificationPolicy (CommunityNotificationPolicy v) => v),
                providerValueComparer: new ValueComparer<CommunityNotificationPolicy>(
                    bool (CommunityNotificationPolicy v1, CommunityNotificationPolicy v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (CommunityNotificationPolicy v) => ((object)v).GetHashCode(),
                    CommunityNotificationPolicy (CommunityNotificationPolicy v) => v),
                clrType: typeof(CommunityNotificationPolicy));
            notificationPolicy.SetComparer(new NullableValueComparer<CommunityNotificationPolicy>(notificationPolicy.TypeMapping.Comparer));
            notificationPolicy.SetKeyComparer(new NullableValueComparer<CommunityNotificationPolicy>(notificationPolicy.TypeMapping.KeyComparer));

            var _roleIds = runtimeEntityType.AddProperty(
                "_roleIds",
                typeof(List<ulong>),
                fieldInfo: typeof(CommunityMember).GetField("_roleIds", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            _roleIds.SetGetter(
                List<ulong> (CommunityMember entity) => CommunityMemberUnsafeAccessors._roleIds(entity),
                bool (CommunityMember entity) => CommunityMemberUnsafeAccessors._roleIds(entity) == null,
                List<ulong> (CommunityMember instance) => CommunityMemberUnsafeAccessors._roleIds(instance),
                bool (CommunityMember instance) => CommunityMemberUnsafeAccessors._roleIds(instance) == null);
            _roleIds.SetSetter(
                (CommunityMember entity, List<ulong> value) => CommunityMemberUnsafeAccessors._roleIds(entity) = value);
            _roleIds.SetMaterializationSetter(
                (CommunityMember entity, List<ulong> value) => CommunityMemberUnsafeAccessors._roleIds(entity) = value);
            _roleIds.SetAccessors(
                List<ulong> (InternalEntityEntry entry) => CommunityMemberUnsafeAccessors._roleIds(((CommunityMember)(entry.Entity))),
                List<ulong> (InternalEntityEntry entry) => CommunityMemberUnsafeAccessors._roleIds(((CommunityMember)(entry.Entity))),
                List<ulong> (InternalEntityEntry entry) => entry.ReadOriginalValue<List<ulong>>(_roleIds, 4),
                List<ulong> (InternalEntityEntry entry) => entry.GetCurrentValue<List<ulong>>(_roleIds),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            _roleIds.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            _roleIds.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<ulong>, ulong>(new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v)),
                keyComparer: new ValueComparer<List<ulong>>(
                    bool (List<ulong> v1, List<ulong> v2) => object.Equals(v1, v2),
                    int (List<ulong> v) => ((object)v).GetHashCode(),
                    List<ulong> (List<ulong> v) => v),
                providerValueComparer: new ValueComparer<List<ulong>>(
                    bool (List<ulong> v1, List<ulong> v2) => object.Equals(v1, v2),
                    int (List<ulong> v) => ((object)v).GetHashCode(),
                    List<ulong> (List<ulong> v) => v),
                clrType: typeof(List<ulong>));
            _roleIds.AddAnnotation("Mongo:ElementName", "RoleIds");

            var key = runtimeEntityType.AddKey(
                new[] { communityId, userId });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var communityId = runtimeEntityType.FindProperty("CommunityId");
            var userId = runtimeEntityType.FindProperty("UserId");
            var joiningDate = runtimeEntityType.FindProperty("JoiningDate");
            var notificationPolicy = runtimeEntityType.FindProperty("NotificationPolicy");
            var _roleIds = runtimeEntityType.FindProperty("_roleIds");
            var key = runtimeEntityType.FindKey(new[] { communityId, userId });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateCompositeFactory(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<IReadOnlyList<object>>(key));
            var voiceState = runtimeEntityType.FindNavigation("VoiceState");
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((CommunityMember)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, ulong, DateTimeOffset, CommunityNotificationPolicy?, List<ulong>>(((ValueComparer<ulong>)(((IProperty)communityId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(communityId)), ((ValueComparer<ulong>)(((IProperty)userId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(userId)), ((ValueComparer<DateTimeOffset>)(((IProperty)joiningDate).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTimeOffset>(joiningDate)), (source.GetCurrentValue<CommunityNotificationPolicy?>(notificationPolicy) == null ? null : ((ValueComparer<CommunityNotificationPolicy?>)(((IProperty)notificationPolicy).GetValueComparer())).Snapshot(source.GetCurrentValue<CommunityNotificationPolicy?>(notificationPolicy))), (((IEnumerable<ulong>)(source.GetCurrentValue<List<ulong>>(_roleIds))) == null ? null : ((List<ulong>)(((ValueComparer<IEnumerable<ulong>>)(((IProperty)_roleIds).GetValueComparer())).Snapshot(((IEnumerable<ulong>)(source.GetCurrentValue<List<ulong>>(_roleIds))))))))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => Snapshot.Empty);
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((CommunityMember)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, ulong, object>(((ValueComparer<ulong>)(((IProperty)communityId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(communityId)), ((ValueComparer<ulong>)(((IProperty)userId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(userId)), CommunityMemberUnsafeAccessors.VoiceState(entity))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 5,
                navigationCount: 1,
                complexPropertyCount: 0,
                originalValueCount: 5,
                shadowCount: 0,
                relationshipCount: 3,
                storeGeneratedCount: 0);
            runtimeEntityType.AddAnnotation("Mongo:CollectionName", "community-users");

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
