// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using MongoDB.EntityFrameworkCore.Storage;
using Razdor.Communities.Domain;
using Razdor.Communities.Domain.Permissions;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Razdor.Communities.Infrastructure.DataAccess
{
    [EntityFrameworkInternal]
    public partial class EveryonePermissionsEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Razdor.Communities.Domain.Permissions.EveryonePermissions",
                typeof(EveryonePermissions),
                baseEntityType,
                propertyCount: 3,
                foreignKeyCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(ulong),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0ul);
            id.SetAccessors(
                ulong (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<ulong>(0) : (entry.FlaggedAsTemporary(0) && entry.ReadShadowValue<ulong>(0) == 0UL ? entry.ReadTemporaryValue<ulong>(0) : entry.ReadShadowValue<ulong>(0))),
                ulong (InternalEntityEntry entry) => entry.ReadShadowValue<ulong>(0),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(id, 0),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: 0,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            id.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(id));

            var permissions = runtimeEntityType.AddProperty(
                "Permissions",
                typeof(UserPermissions),
                propertyInfo: typeof(EveryonePermissions).GetProperty("Permissions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EveryonePermissions).GetField("<Permissions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: UserPermissions.None);
            permissions.SetGetter(
                UserPermissions (EveryonePermissions entity) => EveryonePermissionsUnsafeAccessors.Permissions(entity),
                bool (EveryonePermissions entity) => object.Equals(((object)(EveryonePermissionsUnsafeAccessors.Permissions(entity))), ((object)(UserPermissions.None))),
                UserPermissions (EveryonePermissions instance) => EveryonePermissionsUnsafeAccessors.Permissions(instance),
                bool (EveryonePermissions instance) => object.Equals(((object)(EveryonePermissionsUnsafeAccessors.Permissions(instance))), ((object)(UserPermissions.None))));
            permissions.SetSetter(
                (EveryonePermissions entity, UserPermissions value) => EveryonePermissionsUnsafeAccessors.Permissions(entity) = value);
            permissions.SetMaterializationSetter(
                (EveryonePermissions entity, UserPermissions value) => EveryonePermissionsUnsafeAccessors.Permissions(entity) = value);
            permissions.SetAccessors(
                UserPermissions (InternalEntityEntry entry) => EveryonePermissionsUnsafeAccessors.Permissions(((EveryonePermissions)(entry.Entity))),
                UserPermissions (InternalEntityEntry entry) => EveryonePermissionsUnsafeAccessors.Permissions(((EveryonePermissions)(entry.Entity))),
                UserPermissions (InternalEntityEntry entry) => entry.ReadOriginalValue<UserPermissions>(permissions, 1),
                UserPermissions (InternalEntityEntry entry) => entry.GetCurrentValue<UserPermissions>(permissions),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            permissions.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            permissions.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<UserPermissions>(
                    bool (UserPermissions v1, UserPermissions v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (UserPermissions v) => ((object)v).GetHashCode(),
                    UserPermissions (UserPermissions v) => v),
                keyComparer: new ValueComparer<UserPermissions>(
                    bool (UserPermissions v1, UserPermissions v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (UserPermissions v) => ((object)v).GetHashCode(),
                    UserPermissions (UserPermissions v) => v),
                providerValueComparer: new ValueComparer<UserPermissions>(
                    bool (UserPermissions v1, UserPermissions v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (UserPermissions v) => ((object)v).GetHashCode(),
                    UserPermissions (UserPermissions v) => v),
                clrType: typeof(UserPermissions));

            var priority = runtimeEntityType.AddProperty(
                "Priority",
                typeof(uint),
                propertyInfo: typeof(EveryonePermissions).GetProperty("Priority", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EveryonePermissions).GetField("<Priority>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            priority.SetGetter(
                uint (EveryonePermissions entity) => EveryonePermissionsUnsafeAccessors.Priority(entity),
                bool (EveryonePermissions entity) => EveryonePermissionsUnsafeAccessors.Priority(entity) == 0U,
                uint (EveryonePermissions instance) => EveryonePermissionsUnsafeAccessors.Priority(instance),
                bool (EveryonePermissions instance) => EveryonePermissionsUnsafeAccessors.Priority(instance) == 0U);
            priority.SetSetter(
                (EveryonePermissions entity, uint value) => EveryonePermissionsUnsafeAccessors.Priority(entity) = value);
            priority.SetMaterializationSetter(
                (EveryonePermissions entity, uint value) => EveryonePermissionsUnsafeAccessors.Priority(entity) = value);
            priority.SetAccessors(
                uint (InternalEntityEntry entry) => EveryonePermissionsUnsafeAccessors.Priority(((EveryonePermissions)(entry.Entity))),
                uint (InternalEntityEntry entry) => EveryonePermissionsUnsafeAccessors.Priority(((EveryonePermissions)(entry.Entity))),
                uint (InternalEntityEntry entry) => entry.ReadOriginalValue<uint>(priority, 2),
                uint (InternalEntityEntry entry) => entry.GetCurrentValue<uint>(priority),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            priority.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            priority.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                clrType: typeof(uint));

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("Id") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                unique: true,
                required: true,
                requiredDependent: true,
                ownership: true);

            var everyone = principalEntityType.AddNavigation("Everyone",
                runtimeForeignKey,
                onDependent: false,
                typeof(EveryonePermissions),
                propertyInfo: typeof(Community).GetProperty("Everyone", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Community).GetField("<Everyone>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                eagerLoaded: true);

            everyone.SetGetter(
                EveryonePermissions (Community entity) => CommunityUnsafeAccessors.Everyone(entity),
                bool (Community entity) => CommunityUnsafeAccessors.Everyone(entity) == null,
                EveryonePermissions (Community instance) => CommunityUnsafeAccessors.Everyone(instance),
                bool (Community instance) => CommunityUnsafeAccessors.Everyone(instance) == null);
            everyone.SetSetter(
                (Community entity, EveryonePermissions value) => CommunityUnsafeAccessors.Everyone(entity) = value);
            everyone.SetMaterializationSetter(
                (Community entity, EveryonePermissions value) => CommunityUnsafeAccessors.Everyone(entity) = value);
            everyone.SetAccessors(
                EveryonePermissions (InternalEntityEntry entry) => CommunityUnsafeAccessors.Everyone(((Community)(entry.Entity))),
                EveryonePermissions (InternalEntityEntry entry) => CommunityUnsafeAccessors.Everyone(((Community)(entry.Entity))),
                null,
                EveryonePermissions (InternalEntityEntry entry) => entry.GetCurrentValue<EveryonePermissions>(everyone),
                null);
            everyone.SetPropertyIndexes(
                index: 1,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 2,
                storeGenerationIndex: -1);
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var permissions = runtimeEntityType.FindProperty("Permissions");
            var priority = runtimeEntityType.FindProperty("Priority");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<ulong>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<ulong>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((EveryonePermissions)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, UserPermissions, uint>(((ValueComparer<ulong>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)), ((ValueComparer<UserPermissions>)(((IProperty)permissions).GetValueComparer())).Snapshot(source.GetCurrentValue<UserPermissions>(permissions)), ((ValueComparer<uint>)(((IProperty)priority).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(priority)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<ulong>(((ValueComparer<ulong>)(((IProperty)id).GetValueComparer())).Snapshot(default(ulong))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<ulong>(default(ulong)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => ((ISnapshot)(new Snapshot<ulong>((source.ContainsKey("Id") ? ((ulong)(source["Id"])) : 0UL)))));
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<ulong>(default(ulong)))));
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((EveryonePermissions)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong>(((ValueComparer<ulong>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 3,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 3,
                shadowCount: 1,
                relationshipCount: 1,
                storeGeneratedCount: 1);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
