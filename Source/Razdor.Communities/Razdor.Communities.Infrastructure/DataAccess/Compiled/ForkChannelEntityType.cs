// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using MongoDB.EntityFrameworkCore.Storage;
using Razdor.Communities.Domain.Channels;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Razdor.Communities.Infrastructure.DataAccess
{
    [EntityFrameworkInternal]
    public partial class ForkChannelEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Razdor.Communities.Domain.Channels.ForkChannel",
                typeof(ForkChannel),
                baseEntityType,
                discriminatorProperty: "Type",
                discriminatorValue: ChannelType.ForkChannel,
                propertyCount: 1);

            var messageId = runtimeEntityType.AddProperty(
                "MessageId",
                typeof(ulong),
                propertyInfo: typeof(ForkChannel).GetProperty("MessageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ForkChannel).GetField("<MessageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0ul);
            messageId.SetGetter(
                ulong (ForkChannel entity) => ForkChannelUnsafeAccessors.MessageId(entity),
                bool (ForkChannel entity) => ForkChannelUnsafeAccessors.MessageId(entity) == 0UL,
                ulong (ForkChannel instance) => ForkChannelUnsafeAccessors.MessageId(instance),
                bool (ForkChannel instance) => ForkChannelUnsafeAccessors.MessageId(instance) == 0UL);
            messageId.SetSetter(
                (ForkChannel entity, ulong value) => ForkChannelUnsafeAccessors.MessageId(entity) = value);
            messageId.SetMaterializationSetter(
                (ForkChannel entity, ulong value) => ForkChannelUnsafeAccessors.MessageId(entity) = value);
            messageId.SetAccessors(
                ulong (InternalEntityEntry entry) => ForkChannelUnsafeAccessors.MessageId(((ForkChannel)(entry.Entity))),
                ulong (InternalEntityEntry entry) => ForkChannelUnsafeAccessors.MessageId(((ForkChannel)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(messageId, 6),
                ulong (InternalEntityEntry entry) => entry.GetCurrentValue<ulong>(messageId),
                object (ValueBuffer valueBuffer) => valueBuffer[6]);
            messageId.SetPropertyIndexes(
                index: 6,
                originalValueIndex: 6,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            messageId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var communityId = runtimeEntityType.FindProperty("CommunityId");
            var name = runtimeEntityType.FindProperty("Name");
            var parentId = runtimeEntityType.FindProperty("ParentId");
            var position = runtimeEntityType.FindProperty("Position");
            var type = runtimeEntityType.FindProperty("Type");
            var messageId = runtimeEntityType.FindProperty("MessageId");
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((ForkChannel)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, ulong, string, ulong, uint, ChannelType, ulong>(((ValueComparer<ulong>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)), ((ValueComparer<ulong>)(((IProperty)communityId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(communityId)), (source.GetCurrentValue<string>(name) == null ? null : ((ValueComparer<string>)(((IProperty)name).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(name))), ((ValueComparer<ulong>)(((IProperty)parentId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(parentId)), ((ValueComparer<uint>)(((IProperty)position).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(position)), ((ValueComparer<ChannelType>)(((IProperty)type).GetValueComparer())).Snapshot(source.GetCurrentValue<ChannelType>(type)), ((ValueComparer<ulong>)(((IProperty)messageId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(messageId)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => Snapshot.Empty);
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((ForkChannel)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong>(((ValueComparer<ulong>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 7,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 7,
                shadowCount: 0,
                relationshipCount: 1,
                storeGeneratedCount: 0);
            runtimeEntityType.AddAnnotation("Mongo:CollectionName", "Forks");

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
