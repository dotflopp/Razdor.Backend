// <auto-generated />
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MongoDB.EntityFrameworkCore.Storage;
using Razdor.Communities.Domain.Invites;
using Razdor.Communities.Infrastructure.DataAccess.TypeConverters;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Razdor.Communities.Infrastructure.DataAccess
{
    [EntityFrameworkInternal]
    public partial class InviteEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Razdor.Communities.Domain.Invites.Invite",
                typeof(Invite),
                baseEntityType,
                propertyCount: 6,
                unnamedIndexCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(string),
                propertyInfo: typeof(Invite).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invite).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.SetGetter(
                string (Invite entity) => InviteUnsafeAccessors.Id(entity),
                bool (Invite entity) => InviteUnsafeAccessors.Id(entity) == null,
                string (Invite instance) => InviteUnsafeAccessors.Id(instance),
                bool (Invite instance) => InviteUnsafeAccessors.Id(instance) == null);
            id.SetSetter(
                (Invite entity, string value) => InviteUnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (Invite entity, string value) => InviteUnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                string (InternalEntityEntry entry) => InviteUnsafeAccessors.Id(((Invite)(entry.Entity))),
                string (InternalEntityEntry entry) => InviteUnsafeAccessors.Id(((Invite)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(id, 0),
                string (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<string>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            id.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<string>(id));
            id.AddAnnotation("Mongo:ElementName", "_id");

            var communityId = runtimeEntityType.AddProperty(
                "CommunityId",
                typeof(ulong),
                propertyInfo: typeof(Invite).GetProperty("CommunityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invite).GetField("<CommunityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0ul);
            communityId.SetGetter(
                ulong (Invite entity) => InviteUnsafeAccessors.CommunityId(entity),
                bool (Invite entity) => InviteUnsafeAccessors.CommunityId(entity) == 0UL,
                ulong (Invite instance) => InviteUnsafeAccessors.CommunityId(instance),
                bool (Invite instance) => InviteUnsafeAccessors.CommunityId(instance) == 0UL);
            communityId.SetSetter(
                (Invite entity, ulong value) => InviteUnsafeAccessors.CommunityId(entity) = value);
            communityId.SetMaterializationSetter(
                (Invite entity, ulong value) => InviteUnsafeAccessors.CommunityId(entity) = value);
            communityId.SetAccessors(
                ulong (InternalEntityEntry entry) => InviteUnsafeAccessors.CommunityId(((Invite)(entry.Entity))),
                ulong (InternalEntityEntry entry) => InviteUnsafeAccessors.CommunityId(((Invite)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(communityId, 1),
                ulong (InternalEntityEntry entry) => entry.GetCurrentValue<ulong>(communityId),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            communityId.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            communityId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));

            var createdAt = runtimeEntityType.AddProperty(
                "CreatedAt",
                typeof(DateTimeOffset),
                propertyInfo: typeof(Invite).GetProperty("CreatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invite).GetField("<CreatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new DatetimeOffsetConverter());
            createdAt.SetGetter(
                DateTimeOffset (Invite entity) => InviteUnsafeAccessors.CreatedAt(entity),
                bool (Invite entity) => InviteUnsafeAccessors.CreatedAt(entity).EqualsExact(default(DateTimeOffset)),
                DateTimeOffset (Invite instance) => InviteUnsafeAccessors.CreatedAt(instance),
                bool (Invite instance) => InviteUnsafeAccessors.CreatedAt(instance).EqualsExact(default(DateTimeOffset)));
            createdAt.SetSetter(
                (Invite entity, DateTimeOffset value) => InviteUnsafeAccessors.CreatedAt(entity) = value);
            createdAt.SetMaterializationSetter(
                (Invite entity, DateTimeOffset value) => InviteUnsafeAccessors.CreatedAt(entity) = value);
            createdAt.SetAccessors(
                DateTimeOffset (InternalEntityEntry entry) => InviteUnsafeAccessors.CreatedAt(((Invite)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => InviteUnsafeAccessors.CreatedAt(((Invite)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset>(createdAt, 2),
                DateTimeOffset (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset>(createdAt),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            createdAt.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            createdAt.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                converter: new ValueConverter<DateTimeOffset, string>(
                    string (DateTimeOffset value) => value.ToString("o"),
                    DateTimeOffset (string value) => DateTimeOffset.ParseExact(value, "o", CultureInfo.InvariantCulture)));
            createdAt.SetSentinelFromProviderValue("0001-01-01T00:00:00.0000000+00:00");

            var creatorId = runtimeEntityType.AddProperty(
                "CreatorId",
                typeof(ulong),
                propertyInfo: typeof(Invite).GetProperty("CreatorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invite).GetField("<CreatorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0ul);
            creatorId.SetGetter(
                ulong (Invite entity) => InviteUnsafeAccessors.CreatorId(entity),
                bool (Invite entity) => InviteUnsafeAccessors.CreatorId(entity) == 0UL,
                ulong (Invite instance) => InviteUnsafeAccessors.CreatorId(instance),
                bool (Invite instance) => InviteUnsafeAccessors.CreatorId(instance) == 0UL);
            creatorId.SetSetter(
                (Invite entity, ulong value) => InviteUnsafeAccessors.CreatorId(entity) = value);
            creatorId.SetMaterializationSetter(
                (Invite entity, ulong value) => InviteUnsafeAccessors.CreatorId(entity) = value);
            creatorId.SetAccessors(
                ulong (InternalEntityEntry entry) => InviteUnsafeAccessors.CreatorId(((Invite)(entry.Entity))),
                ulong (InternalEntityEntry entry) => InviteUnsafeAccessors.CreatorId(((Invite)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(creatorId, 3),
                ulong (InternalEntityEntry entry) => entry.GetCurrentValue<ulong>(creatorId),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            creatorId.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            creatorId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));

            var expiresAt = runtimeEntityType.AddProperty(
                "ExpiresAt",
                typeof(DateTimeOffset?),
                propertyInfo: typeof(Invite).GetProperty("ExpiresAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invite).GetField("<ExpiresAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueConverter: new DatetimeOffsetConverter());
            expiresAt.SetGetter(
                DateTimeOffset? (Invite entity) => InviteUnsafeAccessors.ExpiresAt(entity),
                bool (Invite entity) => !(InviteUnsafeAccessors.ExpiresAt(entity).HasValue),
                DateTimeOffset? (Invite instance) => InviteUnsafeAccessors.ExpiresAt(instance),
                bool (Invite instance) => !(InviteUnsafeAccessors.ExpiresAt(instance).HasValue));
            expiresAt.SetSetter(
                (Invite entity, DateTimeOffset? value) => InviteUnsafeAccessors.ExpiresAt(entity) = value);
            expiresAt.SetMaterializationSetter(
                (Invite entity, DateTimeOffset? value) => InviteUnsafeAccessors.ExpiresAt(entity) = value);
            expiresAt.SetAccessors(
                DateTimeOffset? (InternalEntityEntry entry) => InviteUnsafeAccessors.ExpiresAt(((Invite)(entry.Entity))),
                DateTimeOffset? (InternalEntityEntry entry) => InviteUnsafeAccessors.ExpiresAt(((Invite)(entry.Entity))),
                DateTimeOffset? (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset?>(expiresAt, 4),
                DateTimeOffset? (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset?>(expiresAt),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            expiresAt.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            expiresAt.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                converter: new ValueConverter<DateTimeOffset, string>(
                    string (DateTimeOffset value) => value.ToString("o"),
                    DateTimeOffset (string value) => DateTimeOffset.ParseExact(value, "o", CultureInfo.InvariantCulture)));
            expiresAt.SetComparer(new NullableValueComparer<DateTimeOffset>(expiresAt.TypeMapping.Comparer));
            expiresAt.SetKeyComparer(new NullableValueComparer<DateTimeOffset>(expiresAt.TypeMapping.KeyComparer));

            var usesCount = runtimeEntityType.AddProperty(
                "UsesCount",
                typeof(uint),
                propertyInfo: typeof(Invite).GetProperty("UsesCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invite).GetField("<UsesCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            usesCount.SetGetter(
                uint (Invite entity) => InviteUnsafeAccessors.UsesCount(entity),
                bool (Invite entity) => InviteUnsafeAccessors.UsesCount(entity) == 0U,
                uint (Invite instance) => InviteUnsafeAccessors.UsesCount(instance),
                bool (Invite instance) => InviteUnsafeAccessors.UsesCount(instance) == 0U);
            usesCount.SetSetter(
                (Invite entity, uint value) => InviteUnsafeAccessors.UsesCount(entity) = value);
            usesCount.SetMaterializationSetter(
                (Invite entity, uint value) => InviteUnsafeAccessors.UsesCount(entity) = value);
            usesCount.SetAccessors(
                uint (InternalEntityEntry entry) => InviteUnsafeAccessors.UsesCount(((Invite)(entry.Entity))),
                uint (InternalEntityEntry entry) => InviteUnsafeAccessors.UsesCount(((Invite)(entry.Entity))),
                uint (InternalEntityEntry entry) => entry.ReadOriginalValue<uint>(usesCount, 5),
                uint (InternalEntityEntry entry) => entry.GetCurrentValue<uint>(usesCount),
                object (ValueBuffer valueBuffer) => valueBuffer[5]);
            usesCount.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            usesCount.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                clrType: typeof(uint));

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { communityId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { creatorId });

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var communityId = runtimeEntityType.FindProperty("CommunityId");
            var createdAt = runtimeEntityType.FindProperty("CreatedAt");
            var creatorId = runtimeEntityType.FindProperty("CreatorId");
            var expiresAt = runtimeEntityType.FindProperty("ExpiresAt");
            var usesCount = runtimeEntityType.FindProperty("UsesCount");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNullableFactory<string, int>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<string>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((Invite)(source.Entity));
                    return ((ISnapshot)(new Snapshot<string, ulong, DateTimeOffset, ulong, DateTimeOffset?, uint>((source.GetCurrentValue<string>(id) == null ? null : ((ValueComparer<string>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(id))), ((ValueComparer<ulong>)(((IProperty)communityId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(communityId)), ((ValueComparer<DateTimeOffset>)(((IProperty)createdAt).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTimeOffset>(createdAt)), ((ValueComparer<ulong>)(((IProperty)creatorId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(creatorId)), (source.GetCurrentValue<DateTimeOffset?>(expiresAt) == null ? null : ((ValueComparer<DateTimeOffset?>)(((IProperty)expiresAt).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTimeOffset?>(expiresAt))), ((ValueComparer<uint>)(((IProperty)usesCount).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(usesCount)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => Snapshot.Empty);
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((Invite)(source.Entity));
                    return ((ISnapshot)(new Snapshot<string>((source.GetCurrentValue<string>(id) == null ? null : ((ValueComparer<string>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<string>(id))))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 6,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 6,
                shadowCount: 0,
                relationshipCount: 1,
                storeGeneratedCount: 0);
            runtimeEntityType.AddAnnotation("Mongo:CollectionName", "invites");

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
