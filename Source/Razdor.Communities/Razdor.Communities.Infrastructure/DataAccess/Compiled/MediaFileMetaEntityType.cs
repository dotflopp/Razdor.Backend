// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using MongoDB.EntityFrameworkCore.Storage;
using Razdor.Communities.Domain;
using Razdor.Shared.Domain;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Razdor.Communities.Infrastructure.DataAccess
{
    [EntityFrameworkInternal]
    public partial class MediaFileMetaEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Razdor.Shared.Domain.MediaFileMeta",
                typeof(MediaFileMeta),
                baseEntityType,
                propertyCount: 5,
                foreignKeyCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(ulong),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0ul);
            id.SetAccessors(
                ulong (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<ulong>(0) : (entry.FlaggedAsTemporary(0) && entry.ReadShadowValue<ulong>(0) == 0UL ? entry.ReadTemporaryValue<ulong>(0) : entry.ReadShadowValue<ulong>(0))),
                ulong (InternalEntityEntry entry) => entry.ReadShadowValue<ulong>(0),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(id, 0),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: 0,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            id.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(id));

            var fileName = runtimeEntityType.AddProperty(
                "FileName",
                typeof(string),
                propertyInfo: typeof(MediaFileMeta).GetProperty("FileName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MediaFileMeta).GetField("<FileName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            fileName.SetGetter(
                string (MediaFileMeta entity) => MediaFileMetaUnsafeAccessors.FileName(entity),
                bool (MediaFileMeta entity) => MediaFileMetaUnsafeAccessors.FileName(entity) == null,
                string (MediaFileMeta instance) => MediaFileMetaUnsafeAccessors.FileName(instance),
                bool (MediaFileMeta instance) => MediaFileMetaUnsafeAccessors.FileName(instance) == null);
            fileName.SetSetter(
                (MediaFileMeta entity, string value) => MediaFileMetaUnsafeAccessors.FileName(entity) = value);
            fileName.SetMaterializationSetter(
                (MediaFileMeta entity, string value) => MediaFileMetaUnsafeAccessors.FileName(entity) = value);
            fileName.SetAccessors(
                string (InternalEntityEntry entry) => MediaFileMetaUnsafeAccessors.FileName(((MediaFileMeta)(entry.Entity))),
                string (InternalEntityEntry entry) => MediaFileMetaUnsafeAccessors.FileName(((MediaFileMeta)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(fileName, 1),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(fileName),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            fileName.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            fileName.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string));

            var mediaType = runtimeEntityType.AddProperty(
                "MediaType",
                typeof(string),
                propertyInfo: typeof(MediaFileMeta).GetProperty("MediaType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MediaFileMeta).GetField("<MediaType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            mediaType.SetGetter(
                string (MediaFileMeta entity) => MediaFileMetaUnsafeAccessors.MediaType(entity),
                bool (MediaFileMeta entity) => MediaFileMetaUnsafeAccessors.MediaType(entity) == null,
                string (MediaFileMeta instance) => MediaFileMetaUnsafeAccessors.MediaType(instance),
                bool (MediaFileMeta instance) => MediaFileMetaUnsafeAccessors.MediaType(instance) == null);
            mediaType.SetSetter(
                (MediaFileMeta entity, string value) => MediaFileMetaUnsafeAccessors.MediaType(entity) = value);
            mediaType.SetMaterializationSetter(
                (MediaFileMeta entity, string value) => MediaFileMetaUnsafeAccessors.MediaType(entity) = value);
            mediaType.SetAccessors(
                string (InternalEntityEntry entry) => MediaFileMetaUnsafeAccessors.MediaType(((MediaFileMeta)(entry.Entity))),
                string (InternalEntityEntry entry) => MediaFileMetaUnsafeAccessors.MediaType(((MediaFileMeta)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(mediaType, 2),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(mediaType),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            mediaType.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            mediaType.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string));

            var size = runtimeEntityType.AddProperty(
                "Size",
                typeof(long),
                propertyInfo: typeof(MediaFileMeta).GetProperty("Size", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MediaFileMeta).GetField("<Size>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            size.SetGetter(
                long (MediaFileMeta entity) => MediaFileMetaUnsafeAccessors.Size(entity),
                bool (MediaFileMeta entity) => MediaFileMetaUnsafeAccessors.Size(entity) == 0L,
                long (MediaFileMeta instance) => MediaFileMetaUnsafeAccessors.Size(instance),
                bool (MediaFileMeta instance) => MediaFileMetaUnsafeAccessors.Size(instance) == 0L);
            size.SetSetter(
                (MediaFileMeta entity, long value) => MediaFileMetaUnsafeAccessors.Size(entity) = value);
            size.SetMaterializationSetter(
                (MediaFileMeta entity, long value) => MediaFileMetaUnsafeAccessors.Size(entity) = value);
            size.SetAccessors(
                long (InternalEntityEntry entry) => MediaFileMetaUnsafeAccessors.Size(((MediaFileMeta)(entry.Entity))),
                long (InternalEntityEntry entry) => MediaFileMetaUnsafeAccessors.Size(((MediaFileMeta)(entry.Entity))),
                long (InternalEntityEntry entry) => entry.ReadOriginalValue<long>(size, 3),
                long (InternalEntityEntry entry) => entry.GetCurrentValue<long>(size),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            size.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            size.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                keyComparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                providerValueComparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                clrType: typeof(long));

            var sourceUrl = runtimeEntityType.AddProperty(
                "SourceUrl",
                typeof(string),
                propertyInfo: typeof(MediaFileMeta).GetProperty("SourceUrl", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MediaFileMeta).GetField("<SourceUrl>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            sourceUrl.SetGetter(
                string (MediaFileMeta entity) => MediaFileMetaUnsafeAccessors.SourceUrl(entity),
                bool (MediaFileMeta entity) => MediaFileMetaUnsafeAccessors.SourceUrl(entity) == null,
                string (MediaFileMeta instance) => MediaFileMetaUnsafeAccessors.SourceUrl(instance),
                bool (MediaFileMeta instance) => MediaFileMetaUnsafeAccessors.SourceUrl(instance) == null);
            sourceUrl.SetSetter(
                (MediaFileMeta entity, string value) => MediaFileMetaUnsafeAccessors.SourceUrl(entity) = value);
            sourceUrl.SetMaterializationSetter(
                (MediaFileMeta entity, string value) => MediaFileMetaUnsafeAccessors.SourceUrl(entity) = value);
            sourceUrl.SetAccessors(
                string (InternalEntityEntry entry) => MediaFileMetaUnsafeAccessors.SourceUrl(((MediaFileMeta)(entry.Entity))),
                string (InternalEntityEntry entry) => MediaFileMetaUnsafeAccessors.SourceUrl(((MediaFileMeta)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(sourceUrl, 4),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(sourceUrl),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            sourceUrl.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            sourceUrl.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string));

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("Id") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                unique: true,
                required: true,
                ownership: true);

            var avatar = principalEntityType.AddNavigation("Avatar",
                runtimeForeignKey,
                onDependent: false,
                typeof(MediaFileMeta),
                propertyInfo: typeof(Community).GetProperty("Avatar", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Community).GetField("<Avatar>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                eagerLoaded: true);

            avatar.SetGetter(
                MediaFileMeta (Community entity) => CommunityUnsafeAccessors.Avatar(entity),
                bool (Community entity) => CommunityUnsafeAccessors.Avatar(entity) == null,
                MediaFileMeta (Community instance) => CommunityUnsafeAccessors.Avatar(instance),
                bool (Community instance) => CommunityUnsafeAccessors.Avatar(instance) == null);
            avatar.SetSetter(
                (Community entity, MediaFileMeta value) => CommunityUnsafeAccessors.Avatar(entity) = value);
            avatar.SetMaterializationSetter(
                (Community entity, MediaFileMeta value) => CommunityUnsafeAccessors.Avatar(entity) = value);
            avatar.SetAccessors(
                MediaFileMeta (InternalEntityEntry entry) => CommunityUnsafeAccessors.Avatar(((Community)(entry.Entity))),
                MediaFileMeta (InternalEntityEntry entry) => CommunityUnsafeAccessors.Avatar(((Community)(entry.Entity))),
                null,
                MediaFileMeta (InternalEntityEntry entry) => entry.GetCurrentValue<MediaFileMeta>(avatar),
                null);
            avatar.SetPropertyIndexes(
                index: 0,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 1,
                storeGenerationIndex: -1);
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var fileName = runtimeEntityType.FindProperty("FileName");
            var mediaType = runtimeEntityType.FindProperty("MediaType");
            var size = runtimeEntityType.FindProperty("Size");
            var sourceUrl = runtimeEntityType.FindProperty("SourceUrl");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<ulong>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<ulong>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((MediaFileMeta)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, string, string, long, string>(((ValueComparer<ulong>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)), (source.GetCurrentValue<string>(fileName) == null ? null : ((ValueComparer<string>)(((IProperty)fileName).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(fileName))), (source.GetCurrentValue<string>(mediaType) == null ? null : ((ValueComparer<string>)(((IProperty)mediaType).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(mediaType))), ((ValueComparer<long>)(((IProperty)size).GetValueComparer())).Snapshot(source.GetCurrentValue<long>(size)), (source.GetCurrentValue<string>(sourceUrl) == null ? null : ((ValueComparer<string>)(((IProperty)sourceUrl).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(sourceUrl))))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<ulong>(((ValueComparer<ulong>)(((IProperty)id).GetValueComparer())).Snapshot(default(ulong))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<ulong>(default(ulong)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => ((ISnapshot)(new Snapshot<ulong>((source.ContainsKey("Id") ? ((ulong)(source["Id"])) : 0UL)))));
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<ulong>(default(ulong)))));
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((MediaFileMeta)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong>(((ValueComparer<ulong>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 5,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 5,
                shadowCount: 1,
                relationshipCount: 1,
                storeGeneratedCount: 1);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
