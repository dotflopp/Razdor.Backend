// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using MongoDB.EntityFrameworkCore.Storage;
using Razdor.Communities.Domain.Channels;
using Razdor.Communities.Domain.Permissions;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Razdor.Communities.Infrastructure.DataAccess
{
    [EntityFrameworkInternal]
    public partial class OverwriteEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Razdor.Communities.Domain.Channels.OverwritesPermissionChannel._overwrites#Overwrite",
                typeof(Overwrite),
                baseEntityType,
                sharedClrType: true,
                propertyCount: 4,
                navigationCount: 1,
                foreignKeyCount: 1,
                keyCount: 1);

            var overwritesPermissionChannelId = runtimeEntityType.AddProperty(
                "OverwritesPermissionChannelId",
                typeof(ulong),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0ul);
            overwritesPermissionChannelId.SetAccessors(
                ulong (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<ulong>(0) : (entry.FlaggedAsTemporary(0) && entry.ReadShadowValue<ulong>(0) == 0UL ? entry.ReadTemporaryValue<ulong>(0) : entry.ReadShadowValue<ulong>(0))),
                ulong (InternalEntityEntry entry) => entry.ReadShadowValue<ulong>(0),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(overwritesPermissionChannelId, 0),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(overwritesPermissionChannelId, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            overwritesPermissionChannelId.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: 0,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            overwritesPermissionChannelId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));
            overwritesPermissionChannelId.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(overwritesPermissionChannelId));

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.SetAccessors(
                int (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(1) ? entry.ReadStoreGeneratedValue<int>(1) : (entry.FlaggedAsTemporary(1) && entry.ReadShadowValue<int>(1) == 0 ? entry.ReadTemporaryValue<int>(1) : entry.ReadShadowValue<int>(1))),
                int (InternalEntityEntry entry) => entry.ReadShadowValue<int>(1),
                int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(id, 1),
                int (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(id, 1),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            id.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: 1,
                relationshipIndex: 1,
                storeGenerationIndex: 1);
            id.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                clrType: typeof(int));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(id));

            var targetId = runtimeEntityType.AddProperty(
                "TargetId",
                typeof(ulong),
                propertyInfo: typeof(Overwrite).GetProperty("TargetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Overwrite).GetField("<TargetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0ul);
            targetId.SetGetter(
                ulong (Overwrite entity) => OverwriteUnsafeAccessors.TargetId(entity),
                bool (Overwrite entity) => OverwriteUnsafeAccessors.TargetId(entity) == 0UL,
                ulong (Overwrite instance) => OverwriteUnsafeAccessors.TargetId(instance),
                bool (Overwrite instance) => OverwriteUnsafeAccessors.TargetId(instance) == 0UL);
            targetId.SetSetter(
                (Overwrite entity, ulong value) => OverwriteUnsafeAccessors.TargetId(entity) = value);
            targetId.SetMaterializationSetter(
                (Overwrite entity, ulong value) => OverwriteUnsafeAccessors.TargetId(entity) = value);
            targetId.SetAccessors(
                ulong (InternalEntityEntry entry) => OverwriteUnsafeAccessors.TargetId(((Overwrite)(entry.Entity))),
                ulong (InternalEntityEntry entry) => OverwriteUnsafeAccessors.TargetId(((Overwrite)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(targetId, 2),
                ulong (InternalEntityEntry entry) => entry.GetCurrentValue<ulong>(targetId),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            targetId.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            targetId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));

            var targetType = runtimeEntityType.AddProperty(
                "TargetType",
                typeof(PermissionTargetType),
                propertyInfo: typeof(Overwrite).GetProperty("TargetType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Overwrite).GetField("<TargetType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: PermissionTargetType.User);
            targetType.SetGetter(
                PermissionTargetType (Overwrite entity) => OverwriteUnsafeAccessors.TargetType(entity),
                bool (Overwrite entity) => object.Equals(((object)(OverwriteUnsafeAccessors.TargetType(entity))), ((object)(PermissionTargetType.User))),
                PermissionTargetType (Overwrite instance) => OverwriteUnsafeAccessors.TargetType(instance),
                bool (Overwrite instance) => object.Equals(((object)(OverwriteUnsafeAccessors.TargetType(instance))), ((object)(PermissionTargetType.User))));
            targetType.SetSetter(
                (Overwrite entity, PermissionTargetType value) => OverwriteUnsafeAccessors.TargetType(entity) = value);
            targetType.SetMaterializationSetter(
                (Overwrite entity, PermissionTargetType value) => OverwriteUnsafeAccessors.TargetType(entity) = value);
            targetType.SetAccessors(
                PermissionTargetType (InternalEntityEntry entry) => OverwriteUnsafeAccessors.TargetType(((Overwrite)(entry.Entity))),
                PermissionTargetType (InternalEntityEntry entry) => OverwriteUnsafeAccessors.TargetType(((Overwrite)(entry.Entity))),
                PermissionTargetType (InternalEntityEntry entry) => entry.ReadOriginalValue<PermissionTargetType>(targetType, 3),
                PermissionTargetType (InternalEntityEntry entry) => entry.GetCurrentValue<PermissionTargetType>(targetType),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            targetType.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            targetType.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<PermissionTargetType>(
                    bool (PermissionTargetType v1, PermissionTargetType v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (PermissionTargetType v) => ((object)v).GetHashCode(),
                    PermissionTargetType (PermissionTargetType v) => v),
                keyComparer: new ValueComparer<PermissionTargetType>(
                    bool (PermissionTargetType v1, PermissionTargetType v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (PermissionTargetType v) => ((object)v).GetHashCode(),
                    PermissionTargetType (PermissionTargetType v) => v),
                providerValueComparer: new ValueComparer<PermissionTargetType>(
                    bool (PermissionTargetType v1, PermissionTargetType v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (PermissionTargetType v) => ((object)v).GetHashCode(),
                    PermissionTargetType (PermissionTargetType v) => v),
                clrType: typeof(PermissionTargetType));

            var key = runtimeEntityType.AddKey(
                new[] { overwritesPermissionChannelId, id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OverwritesPermissionChannelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true,
                ownership: true);

            var _overwrites = principalEntityType.AddNavigation("_overwrites",
                runtimeForeignKey,
                onDependent: false,
                typeof(List<Overwrite>),
                fieldInfo: typeof(OverwritesPermissionChannel).GetField("_overwrites", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                eagerLoaded: true);

            _overwrites.SetGetter(
                List<Overwrite> (OverwritesPermissionChannel entity) => OverwritesPermissionChannelUnsafeAccessors._overwrites(entity),
                bool (OverwritesPermissionChannel entity) => OverwritesPermissionChannelUnsafeAccessors._overwrites(entity) == null,
                List<Overwrite> (OverwritesPermissionChannel instance) => OverwritesPermissionChannelUnsafeAccessors._overwrites(instance),
                bool (OverwritesPermissionChannel instance) => OverwritesPermissionChannelUnsafeAccessors._overwrites(instance) == null);
            _overwrites.SetSetter(
                (OverwritesPermissionChannel entity, List<Overwrite> value) => OverwritesPermissionChannelUnsafeAccessors._overwrites(entity) = value);
            _overwrites.SetMaterializationSetter(
                (OverwritesPermissionChannel entity, List<Overwrite> value) => OverwritesPermissionChannelUnsafeAccessors._overwrites(entity) = value);
            _overwrites.SetAccessors(
                List<Overwrite> (InternalEntityEntry entry) => OverwritesPermissionChannelUnsafeAccessors._overwrites(((OverwritesPermissionChannel)(entry.Entity))),
                List<Overwrite> (InternalEntityEntry entry) => OverwritesPermissionChannelUnsafeAccessors._overwrites(((OverwritesPermissionChannel)(entry.Entity))),
                null,
                List<Overwrite> (InternalEntityEntry entry) => entry.GetCurrentValue<List<Overwrite>>(_overwrites),
                null);
            _overwrites.SetPropertyIndexes(
                index: 0,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 1,
                storeGenerationIndex: -1);
            _overwrites.SetCollectionAccessor<OverwritesPermissionChannel, List<Overwrite>, Overwrite>(
                List<Overwrite> (OverwritesPermissionChannel entity) => OverwritesPermissionChannelUnsafeAccessors._overwrites(entity),
                (OverwritesPermissionChannel entity, List<Overwrite> collection) => OverwritesPermissionChannelUnsafeAccessors._overwrites(entity) = ((List<Overwrite>)(collection)),
                (OverwritesPermissionChannel entity, List<Overwrite> collection) => OverwritesPermissionChannelUnsafeAccessors._overwrites(entity) = ((List<Overwrite>)(collection)),
                List<Overwrite> (OverwritesPermissionChannel entity, Action<OverwritesPermissionChannel, List<Overwrite>> setter) => ClrCollectionAccessorFactory.CreateAndSet<OverwritesPermissionChannel, List<Overwrite>, List<Overwrite>>(entity, setter),
                List<Overwrite> () => new List<Overwrite>());
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var overwritesPermissionChannelId = runtimeEntityType.FindProperty("OverwritesPermissionChannelId");
            var id = runtimeEntityType.FindProperty("Id");
            var targetId = runtimeEntityType.FindProperty("TargetId");
            var targetType = runtimeEntityType.FindProperty("TargetType");
            var key = runtimeEntityType.FindKey(new[] { overwritesPermissionChannelId, id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateCompositeFactory(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<IReadOnlyList<object>>(key));
            var permissions = runtimeEntityType.FindNavigation("Permissions");
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((Overwrite)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, int, ulong, PermissionTargetType>(((ValueComparer<ulong>)(((IProperty)overwritesPermissionChannelId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(overwritesPermissionChannelId)), ((ValueComparer<int>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(id)), ((ValueComparer<ulong>)(((IProperty)targetId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(targetId)), ((ValueComparer<PermissionTargetType>)(((IProperty)targetType).GetValueComparer())).Snapshot(source.GetCurrentValue<PermissionTargetType>(targetType)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<ulong, int>(((ValueComparer<ulong>)(((IProperty)overwritesPermissionChannelId).GetValueComparer())).Snapshot(default(ulong)), ((ValueComparer<int>)(((IProperty)id).GetValueComparer())).Snapshot(default(int))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<ulong, int>(default(ulong), default(int)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => ((ISnapshot)(new Snapshot<ulong, int>((source.ContainsKey("OverwritesPermissionChannelId") ? ((ulong)(source["OverwritesPermissionChannelId"])) : 0UL), (source.ContainsKey("Id") ? ((int)(source["Id"])) : 0)))));
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<ulong, int>(default(ulong), default(int)))));
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((Overwrite)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, int, object>(((ValueComparer<ulong>)(((IProperty)overwritesPermissionChannelId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(overwritesPermissionChannelId)), ((ValueComparer<int>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<int>(id)), OverwriteUnsafeAccessors.Permissions(entity))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 4,
                navigationCount: 1,
                complexPropertyCount: 0,
                originalValueCount: 4,
                shadowCount: 2,
                relationshipCount: 3,
                storeGeneratedCount: 2);
            runtimeEntityType.AddAnnotation("Mongo:ElementName", "Overwrites");

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
