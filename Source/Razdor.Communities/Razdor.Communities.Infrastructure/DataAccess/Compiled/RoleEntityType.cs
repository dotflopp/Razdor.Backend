// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using MongoDB.EntityFrameworkCore.Storage;
using Razdor.Communities.Domain;
using Razdor.Communities.Domain.Permissions;
using Razdor.Communities.Domain.Roles;
using Razdor.Shared.Domain;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Razdor.Communities.Infrastructure.DataAccess
{
    [EntityFrameworkInternal]
    public partial class RoleEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Razdor.Communities.Domain.Roles.Role",
                typeof(Role),
                baseEntityType,
                propertyCount: 7,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(ulong),
                propertyInfo: typeof(BaseSnowflakeEntity).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BaseSnowflakeEntity).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0ul);
            id.SetGetter(
                ulong (Role entity) => BaseSnowflakeEntityUnsafeAccessors.Id(entity),
                bool (Role entity) => BaseSnowflakeEntityUnsafeAccessors.Id(entity) == 0UL,
                ulong (Role instance) => BaseSnowflakeEntityUnsafeAccessors.Id(instance),
                bool (Role instance) => BaseSnowflakeEntityUnsafeAccessors.Id(instance) == 0UL);
            id.SetSetter(
                (Role entity, ulong value) => BaseSnowflakeEntityUnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (Role entity, ulong value) => BaseSnowflakeEntityUnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                ulong (InternalEntityEntry entry) => BaseSnowflakeEntityUnsafeAccessors.Id(((Role)(entry.Entity))),
                ulong (InternalEntityEntry entry) => BaseSnowflakeEntityUnsafeAccessors.Id(((Role)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(id, 0),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            id.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(id));

            var color = runtimeEntityType.AddProperty(
                "Color",
                typeof(uint),
                propertyInfo: typeof(Role).GetProperty("Color", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Role).GetField("<Color>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            color.SetGetter(
                uint (Role entity) => RoleUnsafeAccessors.Color(entity),
                bool (Role entity) => RoleUnsafeAccessors.Color(entity) == 0U,
                uint (Role instance) => RoleUnsafeAccessors.Color(instance),
                bool (Role instance) => RoleUnsafeAccessors.Color(instance) == 0U);
            color.SetSetter(
                (Role entity, uint value) => RoleUnsafeAccessors.Color(entity) = value);
            color.SetMaterializationSetter(
                (Role entity, uint value) => RoleUnsafeAccessors.Color(entity) = value);
            color.SetAccessors(
                uint (InternalEntityEntry entry) => RoleUnsafeAccessors.Color(((Role)(entry.Entity))),
                uint (InternalEntityEntry entry) => RoleUnsafeAccessors.Color(((Role)(entry.Entity))),
                uint (InternalEntityEntry entry) => entry.ReadOriginalValue<uint>(color, 1),
                uint (InternalEntityEntry entry) => entry.GetCurrentValue<uint>(color),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            color.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            color.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                clrType: typeof(uint));

            var communityId = runtimeEntityType.AddProperty(
                "CommunityId",
                typeof(ulong),
                propertyInfo: typeof(Role).GetProperty("CommunityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Role).GetField("<CommunityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0ul);
            communityId.SetGetter(
                ulong (Role entity) => RoleUnsafeAccessors.CommunityId(entity),
                bool (Role entity) => RoleUnsafeAccessors.CommunityId(entity) == 0UL,
                ulong (Role instance) => RoleUnsafeAccessors.CommunityId(instance),
                bool (Role instance) => RoleUnsafeAccessors.CommunityId(instance) == 0UL);
            communityId.SetSetter(
                (Role entity, ulong value) => RoleUnsafeAccessors.CommunityId(entity) = value);
            communityId.SetMaterializationSetter(
                (Role entity, ulong value) => RoleUnsafeAccessors.CommunityId(entity) = value);
            communityId.SetAccessors(
                ulong (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(2) ? entry.ReadStoreGeneratedValue<ulong>(0) : (entry.FlaggedAsTemporary(2) && RoleUnsafeAccessors.CommunityId(((Role)(entry.Entity))) == 0UL ? entry.ReadTemporaryValue<ulong>(0) : RoleUnsafeAccessors.CommunityId(((Role)(entry.Entity))))),
                ulong (InternalEntityEntry entry) => RoleUnsafeAccessors.CommunityId(((Role)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(communityId, 2),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(communityId, 1),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            communityId.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: 1,
                storeGenerationIndex: 0);
            communityId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));
            communityId.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(communityId));

            var isMentionable = runtimeEntityType.AddProperty(
                "IsMentionable",
                typeof(bool),
                propertyInfo: typeof(Role).GetProperty("IsMentionable", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Role).GetField("<IsMentionable>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isMentionable.SetGetter(
                bool (Role entity) => RoleUnsafeAccessors.IsMentionable(entity),
                bool (Role entity) => RoleUnsafeAccessors.IsMentionable(entity) == false,
                bool (Role instance) => RoleUnsafeAccessors.IsMentionable(instance),
                bool (Role instance) => RoleUnsafeAccessors.IsMentionable(instance) == false);
            isMentionable.SetSetter(
                (Role entity, bool value) => RoleUnsafeAccessors.IsMentionable(entity) = value);
            isMentionable.SetMaterializationSetter(
                (Role entity, bool value) => RoleUnsafeAccessors.IsMentionable(entity) = value);
            isMentionable.SetAccessors(
                bool (InternalEntityEntry entry) => RoleUnsafeAccessors.IsMentionable(((Role)(entry.Entity))),
                bool (InternalEntityEntry entry) => RoleUnsafeAccessors.IsMentionable(((Role)(entry.Entity))),
                bool (InternalEntityEntry entry) => entry.ReadOriginalValue<bool>(isMentionable, 3),
                bool (InternalEntityEntry entry) => entry.GetCurrentValue<bool>(isMentionable),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            isMentionable.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            isMentionable.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                clrType: typeof(bool));

            var name = runtimeEntityType.AddProperty(
                "Name",
                typeof(string),
                propertyInfo: typeof(Role).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Role).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            name.SetGetter(
                string (Role entity) => RoleUnsafeAccessors.Name(entity),
                bool (Role entity) => RoleUnsafeAccessors.Name(entity) == null,
                string (Role instance) => RoleUnsafeAccessors.Name(instance),
                bool (Role instance) => RoleUnsafeAccessors.Name(instance) == null);
            name.SetSetter(
                (Role entity, string value) => RoleUnsafeAccessors.Name(entity) = value);
            name.SetMaterializationSetter(
                (Role entity, string value) => RoleUnsafeAccessors.Name(entity) = value);
            name.SetAccessors(
                string (InternalEntityEntry entry) => RoleUnsafeAccessors.Name(((Role)(entry.Entity))),
                string (InternalEntityEntry entry) => RoleUnsafeAccessors.Name(((Role)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(name, 4),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(name),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            name.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            name.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string));

            var permissions = runtimeEntityType.AddProperty(
                "Permissions",
                typeof(UserPermissions),
                propertyInfo: typeof(Role).GetProperty("Permissions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Role).GetField("<Permissions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: UserPermissions.None);
            permissions.SetGetter(
                UserPermissions (Role entity) => RoleUnsafeAccessors.Permissions(entity),
                bool (Role entity) => object.Equals(((object)(RoleUnsafeAccessors.Permissions(entity))), ((object)(UserPermissions.None))),
                UserPermissions (Role instance) => RoleUnsafeAccessors.Permissions(instance),
                bool (Role instance) => object.Equals(((object)(RoleUnsafeAccessors.Permissions(instance))), ((object)(UserPermissions.None))));
            permissions.SetSetter(
                (Role entity, UserPermissions value) => RoleUnsafeAccessors.Permissions(entity) = value);
            permissions.SetMaterializationSetter(
                (Role entity, UserPermissions value) => RoleUnsafeAccessors.Permissions(entity) = value);
            permissions.SetAccessors(
                UserPermissions (InternalEntityEntry entry) => RoleUnsafeAccessors.Permissions(((Role)(entry.Entity))),
                UserPermissions (InternalEntityEntry entry) => RoleUnsafeAccessors.Permissions(((Role)(entry.Entity))),
                UserPermissions (InternalEntityEntry entry) => entry.ReadOriginalValue<UserPermissions>(permissions, 5),
                UserPermissions (InternalEntityEntry entry) => entry.GetCurrentValue<UserPermissions>(permissions),
                object (ValueBuffer valueBuffer) => valueBuffer[5]);
            permissions.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            permissions.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<UserPermissions>(
                    bool (UserPermissions v1, UserPermissions v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (UserPermissions v) => ((object)v).GetHashCode(),
                    UserPermissions (UserPermissions v) => v),
                keyComparer: new ValueComparer<UserPermissions>(
                    bool (UserPermissions v1, UserPermissions v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (UserPermissions v) => ((object)v).GetHashCode(),
                    UserPermissions (UserPermissions v) => v),
                providerValueComparer: new ValueComparer<UserPermissions>(
                    bool (UserPermissions v1, UserPermissions v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (UserPermissions v) => ((object)v).GetHashCode(),
                    UserPermissions (UserPermissions v) => v),
                clrType: typeof(UserPermissions));

            var priority = runtimeEntityType.AddProperty(
                "Priority",
                typeof(uint),
                propertyInfo: typeof(Role).GetProperty("Priority", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Role).GetField("<Priority>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            priority.SetGetter(
                uint (Role entity) => RoleUnsafeAccessors.Priority(entity),
                bool (Role entity) => RoleUnsafeAccessors.Priority(entity) == 0U,
                uint (Role instance) => RoleUnsafeAccessors.Priority(instance),
                bool (Role instance) => RoleUnsafeAccessors.Priority(instance) == 0U);
            priority.SetSetter(
                (Role entity, uint value) => RoleUnsafeAccessors.Priority(entity) = value);
            priority.SetMaterializationSetter(
                (Role entity, uint value) => RoleUnsafeAccessors.Priority(entity) = value);
            priority.SetAccessors(
                uint (InternalEntityEntry entry) => RoleUnsafeAccessors.Priority(((Role)(entry.Entity))),
                uint (InternalEntityEntry entry) => RoleUnsafeAccessors.Priority(((Role)(entry.Entity))),
                uint (InternalEntityEntry entry) => entry.ReadOriginalValue<uint>(priority, 6),
                uint (InternalEntityEntry entry) => entry.GetCurrentValue<uint>(priority),
                object (ValueBuffer valueBuffer) => valueBuffer[6]);
            priority.SetPropertyIndexes(
                index: 6,
                originalValueIndex: 6,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            priority.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                clrType: typeof(uint));

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { communityId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CommunityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true,
                ownership: true);

            var _roles = principalEntityType.AddNavigation("_roles",
                runtimeForeignKey,
                onDependent: false,
                typeof(List<Role>),
                fieldInfo: typeof(Community).GetField("_roles", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                eagerLoaded: true);

            _roles.SetGetter(
                List<Role> (Community entity) => CommunityUnsafeAccessors._roles(entity),
                bool (Community entity) => CommunityUnsafeAccessors._roles(entity) == null,
                List<Role> (Community instance) => CommunityUnsafeAccessors._roles(instance),
                bool (Community instance) => CommunityUnsafeAccessors._roles(instance) == null);
            _roles.SetSetter(
                (Community entity, List<Role> value) => CommunityUnsafeAccessors._roles(entity) = value);
            _roles.SetMaterializationSetter(
                (Community entity, List<Role> value) => CommunityUnsafeAccessors._roles(entity) = value);
            _roles.SetAccessors(
                List<Role> (InternalEntityEntry entry) => CommunityUnsafeAccessors._roles(((Community)(entry.Entity))),
                List<Role> (InternalEntityEntry entry) => CommunityUnsafeAccessors._roles(((Community)(entry.Entity))),
                null,
                List<Role> (InternalEntityEntry entry) => entry.GetCurrentValue<List<Role>>(_roles),
                null);
            _roles.SetPropertyIndexes(
                index: 2,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 3,
                storeGenerationIndex: -1);
            _roles.SetCollectionAccessor<Community, List<Role>, Role>(
                List<Role> (Community entity) => CommunityUnsafeAccessors._roles(entity),
                (Community entity, List<Role> collection) => CommunityUnsafeAccessors._roles(entity) = ((List<Role>)(collection)),
                (Community entity, List<Role> collection) => CommunityUnsafeAccessors._roles(entity) = ((List<Role>)(collection)),
                List<Role> (Community entity, Action<Community, List<Role>> setter) => ClrCollectionAccessorFactory.CreateAndSet<Community, List<Role>, List<Role>>(entity, setter),
                List<Role> () => new List<Role>());
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var color = runtimeEntityType.FindProperty("Color");
            var communityId = runtimeEntityType.FindProperty("CommunityId");
            var isMentionable = runtimeEntityType.FindProperty("IsMentionable");
            var name = runtimeEntityType.FindProperty("Name");
            var permissions = runtimeEntityType.FindProperty("Permissions");
            var priority = runtimeEntityType.FindProperty("Priority");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<ulong>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<ulong>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((Role)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, uint, ulong, bool, string, UserPermissions, uint>(((ValueComparer<ulong>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)), ((ValueComparer<uint>)(((IProperty)color).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(color)), ((ValueComparer<ulong>)(((IProperty)communityId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(communityId)), ((ValueComparer<bool>)(((IProperty)isMentionable).GetValueComparer())).Snapshot(source.GetCurrentValue<bool>(isMentionable)), (source.GetCurrentValue<string>(name) == null ? null : ((ValueComparer<string>)(((IProperty)name).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(name))), ((ValueComparer<UserPermissions>)(((IProperty)permissions).GetValueComparer())).Snapshot(source.GetCurrentValue<UserPermissions>(permissions)), ((ValueComparer<uint>)(((IProperty)priority).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(priority)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<ulong>(((ValueComparer<ulong>)(((IProperty)communityId).GetValueComparer())).Snapshot(default(ulong))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<ulong>(default(ulong)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((Role)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, ulong>(((ValueComparer<ulong>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)), ((ValueComparer<ulong>)(((IProperty)communityId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(communityId)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 7,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 7,
                shadowCount: 0,
                relationshipCount: 2,
                storeGeneratedCount: 1);
            runtimeEntityType.AddAnnotation("Mongo:ElementName", "Roles");

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
