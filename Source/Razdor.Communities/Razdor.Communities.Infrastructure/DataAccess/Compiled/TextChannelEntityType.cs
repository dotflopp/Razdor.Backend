// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Razdor.Communities.Domain.Channels;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Razdor.Communities.Infrastructure.DataAccess
{
    [EntityFrameworkInternal]
    public partial class TextChannelEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Razdor.Communities.Domain.Channels.TextChannel",
                typeof(TextChannel),
                baseEntityType,
                discriminatorProperty: "Type",
                discriminatorValue: ChannelType.TextChannel,
                propertyCount: 0);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var communityId = runtimeEntityType.FindProperty("CommunityId");
            var name = runtimeEntityType.FindProperty("Name");
            var parentId = runtimeEntityType.FindProperty("ParentId");
            var position = runtimeEntityType.FindProperty("Position");
            var type = runtimeEntityType.FindProperty("Type");
            var _overwrites = runtimeEntityType.FindNavigation("_overwrites");
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((TextChannel)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, ulong, string, ulong, uint, ChannelType>(((ValueComparer<ulong>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)), ((ValueComparer<ulong>)(((IProperty)communityId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(communityId)), (source.GetCurrentValue<string>(name) == null ? null : ((ValueComparer<string>)(((IProperty)name).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(name))), ((ValueComparer<ulong>)(((IProperty)parentId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(parentId)), ((ValueComparer<uint>)(((IProperty)position).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(position)), ((ValueComparer<ChannelType>)(((IProperty)type).GetValueComparer())).Snapshot(source.GetCurrentValue<ChannelType>(type)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => Snapshot.Empty);
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((TextChannel)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, object>(((ValueComparer<ulong>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)), SnapshotFactoryFactory.SnapshotCollection(OverwritesPermissionChannelUnsafeAccessors._overwrites(entity)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 6,
                navigationCount: 1,
                complexPropertyCount: 0,
                originalValueCount: 6,
                shadowCount: 0,
                relationshipCount: 2,
                storeGeneratedCount: 0);
            runtimeEntityType.AddAnnotation("Mongo:CollectionName", "Messages");

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
