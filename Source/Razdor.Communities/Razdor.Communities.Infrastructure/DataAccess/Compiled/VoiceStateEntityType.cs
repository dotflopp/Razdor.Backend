// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using MongoDB.EntityFrameworkCore.Storage;
using Razdor.Communities.Domain.Members;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Razdor.Communities.Infrastructure.DataAccess
{
    [EntityFrameworkInternal]
    public partial class VoiceStateEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Razdor.Communities.Domain.Members.VoiceState",
                typeof(VoiceState),
                baseEntityType,
                propertyCount: 7,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var communityId = runtimeEntityType.AddProperty(
                "CommunityId",
                typeof(ulong),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0ul);
            communityId.SetAccessors(
                ulong (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<ulong>(0) : (entry.FlaggedAsTemporary(0) && entry.ReadShadowValue<ulong>(0) == 0UL ? entry.ReadTemporaryValue<ulong>(0) : entry.ReadShadowValue<ulong>(0))),
                ulong (InternalEntityEntry entry) => entry.ReadShadowValue<ulong>(0),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(communityId, 0),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(communityId, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            communityId.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: 0,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            communityId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));
            communityId.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(communityId));

            var userId = runtimeEntityType.AddProperty(
                "UserId",
                typeof(ulong),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0ul);
            userId.SetAccessors(
                ulong (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(1) ? entry.ReadStoreGeneratedValue<ulong>(1) : (entry.FlaggedAsTemporary(1) && entry.ReadShadowValue<ulong>(1) == 0UL ? entry.ReadTemporaryValue<ulong>(1) : entry.ReadShadowValue<ulong>(1))),
                ulong (InternalEntityEntry entry) => entry.ReadShadowValue<ulong>(1),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(userId, 1),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(userId, 1),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            userId.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: 1,
                relationshipIndex: 1,
                storeGenerationIndex: 1);
            userId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));
            userId.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(userId));

            var channelId = runtimeEntityType.AddProperty(
                "ChannelId",
                typeof(ulong),
                propertyInfo: typeof(VoiceState).GetProperty("ChannelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VoiceState).GetField("<ChannelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0ul);
            channelId.SetGetter(
                ulong (VoiceState entity) => VoiceStateUnsafeAccessors.ChannelId(entity),
                bool (VoiceState entity) => VoiceStateUnsafeAccessors.ChannelId(entity) == 0UL,
                ulong (VoiceState instance) => VoiceStateUnsafeAccessors.ChannelId(instance),
                bool (VoiceState instance) => VoiceStateUnsafeAccessors.ChannelId(instance) == 0UL);
            channelId.SetSetter(
                (VoiceState entity, ulong value) => VoiceStateUnsafeAccessors.ChannelId(entity) = value);
            channelId.SetMaterializationSetter(
                (VoiceState entity, ulong value) => VoiceStateUnsafeAccessors.ChannelId(entity) = value);
            channelId.SetAccessors(
                ulong (InternalEntityEntry entry) => VoiceStateUnsafeAccessors.ChannelId(((VoiceState)(entry.Entity))),
                ulong (InternalEntityEntry entry) => VoiceStateUnsafeAccessors.ChannelId(((VoiceState)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(channelId, 2),
                ulong (InternalEntityEntry entry) => entry.GetCurrentValue<ulong>(channelId),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            channelId.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            channelId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));

            var isDeafened = runtimeEntityType.AddProperty(
                "IsDeafened",
                typeof(bool),
                propertyInfo: typeof(VoiceState).GetProperty("IsDeafened", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VoiceState).GetField("<IsDeafened>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isDeafened.SetGetter(
                bool (VoiceState entity) => VoiceStateUnsafeAccessors.IsDeafened(entity),
                bool (VoiceState entity) => VoiceStateUnsafeAccessors.IsDeafened(entity) == false,
                bool (VoiceState instance) => VoiceStateUnsafeAccessors.IsDeafened(instance),
                bool (VoiceState instance) => VoiceStateUnsafeAccessors.IsDeafened(instance) == false);
            isDeafened.SetSetter(
                (VoiceState entity, bool value) => VoiceStateUnsafeAccessors.IsDeafened(entity) = value);
            isDeafened.SetMaterializationSetter(
                (VoiceState entity, bool value) => VoiceStateUnsafeAccessors.IsDeafened(entity) = value);
            isDeafened.SetAccessors(
                bool (InternalEntityEntry entry) => VoiceStateUnsafeAccessors.IsDeafened(((VoiceState)(entry.Entity))),
                bool (InternalEntityEntry entry) => VoiceStateUnsafeAccessors.IsDeafened(((VoiceState)(entry.Entity))),
                bool (InternalEntityEntry entry) => entry.ReadOriginalValue<bool>(isDeafened, 3),
                bool (InternalEntityEntry entry) => entry.GetCurrentValue<bool>(isDeafened),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            isDeafened.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            isDeafened.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                clrType: typeof(bool));

            var isMuted = runtimeEntityType.AddProperty(
                "IsMuted",
                typeof(bool),
                propertyInfo: typeof(VoiceState).GetProperty("IsMuted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VoiceState).GetField("<IsMuted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isMuted.SetGetter(
                bool (VoiceState entity) => VoiceStateUnsafeAccessors.IsMuted(entity),
                bool (VoiceState entity) => VoiceStateUnsafeAccessors.IsMuted(entity) == false,
                bool (VoiceState instance) => VoiceStateUnsafeAccessors.IsMuted(instance),
                bool (VoiceState instance) => VoiceStateUnsafeAccessors.IsMuted(instance) == false);
            isMuted.SetSetter(
                (VoiceState entity, bool value) => VoiceStateUnsafeAccessors.IsMuted(entity) = value);
            isMuted.SetMaterializationSetter(
                (VoiceState entity, bool value) => VoiceStateUnsafeAccessors.IsMuted(entity) = value);
            isMuted.SetAccessors(
                bool (InternalEntityEntry entry) => VoiceStateUnsafeAccessors.IsMuted(((VoiceState)(entry.Entity))),
                bool (InternalEntityEntry entry) => VoiceStateUnsafeAccessors.IsMuted(((VoiceState)(entry.Entity))),
                bool (InternalEntityEntry entry) => entry.ReadOriginalValue<bool>(isMuted, 4),
                bool (InternalEntityEntry entry) => entry.GetCurrentValue<bool>(isMuted),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            isMuted.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            isMuted.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                clrType: typeof(bool));

            var isSelfDeafened = runtimeEntityType.AddProperty(
                "IsSelfDeafened",
                typeof(bool),
                propertyInfo: typeof(VoiceState).GetProperty("IsSelfDeafened", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VoiceState).GetField("<IsSelfDeafened>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isSelfDeafened.SetGetter(
                bool (VoiceState entity) => VoiceStateUnsafeAccessors.IsSelfDeafened(entity),
                bool (VoiceState entity) => VoiceStateUnsafeAccessors.IsSelfDeafened(entity) == false,
                bool (VoiceState instance) => VoiceStateUnsafeAccessors.IsSelfDeafened(instance),
                bool (VoiceState instance) => VoiceStateUnsafeAccessors.IsSelfDeafened(instance) == false);
            isSelfDeafened.SetSetter(
                (VoiceState entity, bool value) => VoiceStateUnsafeAccessors.IsSelfDeafened(entity) = value);
            isSelfDeafened.SetMaterializationSetter(
                (VoiceState entity, bool value) => VoiceStateUnsafeAccessors.IsSelfDeafened(entity) = value);
            isSelfDeafened.SetAccessors(
                bool (InternalEntityEntry entry) => VoiceStateUnsafeAccessors.IsSelfDeafened(((VoiceState)(entry.Entity))),
                bool (InternalEntityEntry entry) => VoiceStateUnsafeAccessors.IsSelfDeafened(((VoiceState)(entry.Entity))),
                bool (InternalEntityEntry entry) => entry.ReadOriginalValue<bool>(isSelfDeafened, 5),
                bool (InternalEntityEntry entry) => entry.GetCurrentValue<bool>(isSelfDeafened),
                object (ValueBuffer valueBuffer) => valueBuffer[5]);
            isSelfDeafened.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            isSelfDeafened.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                clrType: typeof(bool));

            var isSelfMuted = runtimeEntityType.AddProperty(
                "IsSelfMuted",
                typeof(bool),
                propertyInfo: typeof(VoiceState).GetProperty("IsSelfMuted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VoiceState).GetField("<IsSelfMuted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isSelfMuted.SetGetter(
                bool (VoiceState entity) => VoiceStateUnsafeAccessors.IsSelfMuted(entity),
                bool (VoiceState entity) => VoiceStateUnsafeAccessors.IsSelfMuted(entity) == false,
                bool (VoiceState instance) => VoiceStateUnsafeAccessors.IsSelfMuted(instance),
                bool (VoiceState instance) => VoiceStateUnsafeAccessors.IsSelfMuted(instance) == false);
            isSelfMuted.SetSetter(
                (VoiceState entity, bool value) => VoiceStateUnsafeAccessors.IsSelfMuted(entity) = value);
            isSelfMuted.SetMaterializationSetter(
                (VoiceState entity, bool value) => VoiceStateUnsafeAccessors.IsSelfMuted(entity) = value);
            isSelfMuted.SetAccessors(
                bool (InternalEntityEntry entry) => VoiceStateUnsafeAccessors.IsSelfMuted(((VoiceState)(entry.Entity))),
                bool (InternalEntityEntry entry) => VoiceStateUnsafeAccessors.IsSelfMuted(((VoiceState)(entry.Entity))),
                bool (InternalEntityEntry entry) => entry.ReadOriginalValue<bool>(isSelfMuted, 6),
                bool (InternalEntityEntry entry) => entry.GetCurrentValue<bool>(isSelfMuted),
                object (ValueBuffer valueBuffer) => valueBuffer[6]);
            isSelfMuted.SetPropertyIndexes(
                index: 6,
                originalValueIndex: 6,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            isSelfMuted.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                clrType: typeof(bool));

            var key = runtimeEntityType.AddKey(
                new[] { communityId, userId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { channelId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CommunityId"), declaringEntityType.FindProperty("UserId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CommunityId"), principalEntityType.FindProperty("UserId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                unique: true,
                required: true,
                requiredDependent: true,
                ownership: true);

            var voiceState = principalEntityType.AddNavigation("VoiceState",
                runtimeForeignKey,
                onDependent: false,
                typeof(VoiceState),
                propertyInfo: typeof(CommunityMember).GetProperty("VoiceState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CommunityMember).GetField("<VoiceState>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                eagerLoaded: true);

            voiceState.SetGetter(
                VoiceState (CommunityMember entity) => CommunityMemberUnsafeAccessors.VoiceState(entity),
                bool (CommunityMember entity) => CommunityMemberUnsafeAccessors.VoiceState(entity) == null,
                VoiceState (CommunityMember instance) => CommunityMemberUnsafeAccessors.VoiceState(instance),
                bool (CommunityMember instance) => CommunityMemberUnsafeAccessors.VoiceState(instance) == null);
            voiceState.SetSetter(
                (CommunityMember entity, VoiceState value) => CommunityMemberUnsafeAccessors.VoiceState(entity) = value);
            voiceState.SetMaterializationSetter(
                (CommunityMember entity, VoiceState value) => CommunityMemberUnsafeAccessors.VoiceState(entity) = value);
            voiceState.SetAccessors(
                VoiceState (InternalEntityEntry entry) => CommunityMemberUnsafeAccessors.VoiceState(((CommunityMember)(entry.Entity))),
                VoiceState (InternalEntityEntry entry) => CommunityMemberUnsafeAccessors.VoiceState(((CommunityMember)(entry.Entity))),
                null,
                VoiceState (InternalEntityEntry entry) => entry.GetCurrentValue<VoiceState>(voiceState),
                null);
            voiceState.SetPropertyIndexes(
                index: 0,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 2,
                storeGenerationIndex: -1);
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var communityId = runtimeEntityType.FindProperty("CommunityId");
            var userId = runtimeEntityType.FindProperty("UserId");
            var channelId = runtimeEntityType.FindProperty("ChannelId");
            var isDeafened = runtimeEntityType.FindProperty("IsDeafened");
            var isMuted = runtimeEntityType.FindProperty("IsMuted");
            var isSelfDeafened = runtimeEntityType.FindProperty("IsSelfDeafened");
            var isSelfMuted = runtimeEntityType.FindProperty("IsSelfMuted");
            var key = runtimeEntityType.FindKey(new[] { communityId, userId });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateCompositeFactory(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<IReadOnlyList<object>>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((VoiceState)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, ulong, ulong, bool, bool, bool, bool>(((ValueComparer<ulong>)(((IProperty)communityId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(communityId)), ((ValueComparer<ulong>)(((IProperty)userId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(userId)), ((ValueComparer<ulong>)(((IProperty)channelId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(channelId)), ((ValueComparer<bool>)(((IProperty)isDeafened).GetValueComparer())).Snapshot(source.GetCurrentValue<bool>(isDeafened)), ((ValueComparer<bool>)(((IProperty)isMuted).GetValueComparer())).Snapshot(source.GetCurrentValue<bool>(isMuted)), ((ValueComparer<bool>)(((IProperty)isSelfDeafened).GetValueComparer())).Snapshot(source.GetCurrentValue<bool>(isSelfDeafened)), ((ValueComparer<bool>)(((IProperty)isSelfMuted).GetValueComparer())).Snapshot(source.GetCurrentValue<bool>(isSelfMuted)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<ulong, ulong>(((ValueComparer<ulong>)(((IProperty)communityId).GetValueComparer())).Snapshot(default(ulong)), ((ValueComparer<ulong>)(((IProperty)userId).GetValueComparer())).Snapshot(default(ulong))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<ulong, ulong>(default(ulong), default(ulong)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => ((ISnapshot)(new Snapshot<ulong, ulong>((source.ContainsKey("CommunityId") ? ((ulong)(source["CommunityId"])) : 0UL), (source.ContainsKey("UserId") ? ((ulong)(source["UserId"])) : 0UL)))));
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<ulong, ulong>(default(ulong), default(ulong)))));
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((VoiceState)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, ulong>(((ValueComparer<ulong>)(((IProperty)communityId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(communityId)), ((ValueComparer<ulong>)(((IProperty)userId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(userId)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 7,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 7,
                shadowCount: 2,
                relationshipCount: 2,
                storeGeneratedCount: 2);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
