// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Update.Internal;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Razdor.Identity.Infrastructure.DataAccess
{
    public partial class IdentityPostgresDbContextModel
    {
        private IdentityPostgresDbContextModel()
            : base(skipDetectChanges: false, modelId: new Guid("9c1ff66f-ed34-4368-a7ed-9915de18b27c"), entityTypeCount: 2)
        {
        }

        partial void Initialize()
        {
            var userAccount = UserAccountEntityType.Create(this);
            var mediaFileMeta = MediaFileMetaEntityType.Create(this);

            MediaFileMetaEntityType.CreateForeignKey1(mediaFileMeta, userAccount);

            UserAccountEntityType.CreateAnnotations(userAccount);
            MediaFileMetaEntityType.CreateAnnotations(mediaFileMeta);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "9.0.5");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModelFactory", () => CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var userAccount = FindEntityType("Razdor.Identity.Domain.Users.UserAccount")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            userAccount.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var razdorIdentityDomainUsersUserAccountTableBase = new TableBase("Razdor.Identity.Domain.Users.UserAccount", null, relationalModel);
            var credentialsChangeDateColumnBase = new ColumnBase<ColumnMappingBase>("CredentialsChangeDate", "timestamp with time zone", razdorIdentityDomainUsersUserAccountTableBase);
            razdorIdentityDomainUsersUserAccountTableBase.Columns.Add("CredentialsChangeDate", credentialsChangeDateColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "character varying(300)", razdorIdentityDomainUsersUserAccountTableBase)
            {
                IsNullable = true
            };
            razdorIdentityDomainUsersUserAccountTableBase.Columns.Add("Description", descriptionColumnBase);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("Email", "text", razdorIdentityDomainUsersUserAccountTableBase);
            razdorIdentityDomainUsersUserAccountTableBase.Columns.Add("Email", emailColumnBase);
            var hashedPasswordColumnBase = new ColumnBase<ColumnMappingBase>("HashedPassword", "text", razdorIdentityDomainUsersUserAccountTableBase)
            {
                IsNullable = true
            };
            razdorIdentityDomainUsersUserAccountTableBase.Columns.Add("HashedPassword", hashedPasswordColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "numeric(20,0)", razdorIdentityDomainUsersUserAccountTableBase);
            razdorIdentityDomainUsersUserAccountTableBase.Columns.Add("Id", idColumnBase);
            var identityNameColumnBase = new ColumnBase<ColumnMappingBase>("IdentityName", "character varying(50)", razdorIdentityDomainUsersUserAccountTableBase);
            razdorIdentityDomainUsersUserAccountTableBase.Columns.Add("IdentityName", identityNameColumnBase);
            var isOnlineColumnBase = new ColumnBase<ColumnMappingBase>("IsOnline", "boolean", razdorIdentityDomainUsersUserAccountTableBase);
            razdorIdentityDomainUsersUserAccountTableBase.Columns.Add("IsOnline", isOnlineColumnBase);
            var nicknameColumnBase = new ColumnBase<ColumnMappingBase>("Nickname", "text", razdorIdentityDomainUsersUserAccountTableBase);
            razdorIdentityDomainUsersUserAccountTableBase.Columns.Add("Nickname", nicknameColumnBase);
            var registrationDateColumnBase = new ColumnBase<ColumnMappingBase>("RegistrationDate", "timestamp with time zone", razdorIdentityDomainUsersUserAccountTableBase);
            razdorIdentityDomainUsersUserAccountTableBase.Columns.Add("RegistrationDate", registrationDateColumnBase);
            var selectedStatusColumnBase = new ColumnBase<ColumnMappingBase>("SelectedStatus", "integer", razdorIdentityDomainUsersUserAccountTableBase);
            razdorIdentityDomainUsersUserAccountTableBase.Columns.Add("SelectedStatus", selectedStatusColumnBase);
            relationalModel.DefaultTables.Add("Razdor.Identity.Domain.Users.UserAccount", razdorIdentityDomainUsersUserAccountTableBase);
            var razdorIdentityDomainUsersUserAccountMappingBase = new TableMappingBase<ColumnMappingBase>(userAccount, razdorIdentityDomainUsersUserAccountTableBase, null);
            razdorIdentityDomainUsersUserAccountTableBase.AddTypeMapping(razdorIdentityDomainUsersUserAccountMappingBase, false);
            defaultTableMappings.Add(razdorIdentityDomainUsersUserAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, userAccount.FindProperty("Id")!, razdorIdentityDomainUsersUserAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)credentialsChangeDateColumnBase, userAccount.FindProperty("CredentialsChangeDate")!, razdorIdentityDomainUsersUserAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, userAccount.FindProperty("Description")!, razdorIdentityDomainUsersUserAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, userAccount.FindProperty("Email")!, razdorIdentityDomainUsersUserAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hashedPasswordColumnBase, userAccount.FindProperty("HashedPassword")!, razdorIdentityDomainUsersUserAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)identityNameColumnBase, userAccount.FindProperty("IdentityName")!, razdorIdentityDomainUsersUserAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isOnlineColumnBase, userAccount.FindProperty("IsOnline")!, razdorIdentityDomainUsersUserAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nicknameColumnBase, userAccount.FindProperty("Nickname")!, razdorIdentityDomainUsersUserAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)registrationDateColumnBase, userAccount.FindProperty("RegistrationDate")!, razdorIdentityDomainUsersUserAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)selectedStatusColumnBase, userAccount.FindProperty("SelectedStatus")!, razdorIdentityDomainUsersUserAccountMappingBase);

            var tableMappings = new List<TableMapping>();
            userAccount.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var useraccountsTable = new Table("user-accounts", null, relationalModel);
            var idColumn = new Column("Id", "numeric(20,0)", useraccountsTable);
            useraccountsTable.Columns.Add("Id", idColumn);
            idColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(idColumn);
            var avatar_FileNameColumn = new Column("Avatar_FileName", "text", useraccountsTable)
            {
                IsNullable = true
            };
            useraccountsTable.Columns.Add("Avatar_FileName", avatar_FileNameColumn);
            avatar_FileNameColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(avatar_FileNameColumn);
            var avatar_MediaTypeColumn = new Column("Avatar_MediaType", "text", useraccountsTable)
            {
                IsNullable = true
            };
            useraccountsTable.Columns.Add("Avatar_MediaType", avatar_MediaTypeColumn);
            avatar_MediaTypeColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(avatar_MediaTypeColumn);
            var avatar_SizeColumn = new Column("Avatar_Size", "bigint", useraccountsTable)
            {
                IsNullable = true
            };
            useraccountsTable.Columns.Add("Avatar_Size", avatar_SizeColumn);
            avatar_SizeColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<long>(avatar_SizeColumn);
            var avatar_SourceUrlColumn = new Column("Avatar_SourceUrl", "text", useraccountsTable)
            {
                IsNullable = true
            };
            useraccountsTable.Columns.Add("Avatar_SourceUrl", avatar_SourceUrlColumn);
            avatar_SourceUrlColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(avatar_SourceUrlColumn);
            var credentialsChangeDateColumn = new Column("CredentialsChangeDate", "timestamp with time zone", useraccountsTable);
            useraccountsTable.Columns.Add("CredentialsChangeDate", credentialsChangeDateColumn);
            credentialsChangeDateColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<DateTimeOffset>(credentialsChangeDateColumn);
            var descriptionColumn = new Column("Description", "character varying(300)", useraccountsTable)
            {
                IsNullable = true
            };
            useraccountsTable.Columns.Add("Description", descriptionColumn);
            descriptionColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(descriptionColumn);
            var emailColumn = new Column("Email", "text", useraccountsTable);
            useraccountsTable.Columns.Add("Email", emailColumn);
            emailColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(emailColumn);
            var hashedPasswordColumn = new Column("HashedPassword", "text", useraccountsTable)
            {
                IsNullable = true
            };
            useraccountsTable.Columns.Add("HashedPassword", hashedPasswordColumn);
            hashedPasswordColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(hashedPasswordColumn);
            var identityNameColumn = new Column("IdentityName", "character varying(50)", useraccountsTable);
            useraccountsTable.Columns.Add("IdentityName", identityNameColumn);
            identityNameColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(identityNameColumn);
            var isOnlineColumn = new Column("IsOnline", "boolean", useraccountsTable);
            useraccountsTable.Columns.Add("IsOnline", isOnlineColumn);
            isOnlineColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<bool>(isOnlineColumn);
            var nicknameColumn = new Column("Nickname", "text", useraccountsTable);
            useraccountsTable.Columns.Add("Nickname", nicknameColumn);
            nicknameColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(nicknameColumn);
            var registrationDateColumn = new Column("RegistrationDate", "timestamp with time zone", useraccountsTable);
            useraccountsTable.Columns.Add("RegistrationDate", registrationDateColumn);
            registrationDateColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<DateTimeOffset>(registrationDateColumn);
            var selectedStatusColumn = new Column("SelectedStatus", "integer", useraccountsTable);
            useraccountsTable.Columns.Add("SelectedStatus", selectedStatusColumn);
            selectedStatusColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<int>(selectedStatusColumn);
            relationalModel.Tables.Add(("user-accounts", null), useraccountsTable);
            var useraccountsTableMapping = new TableMapping(userAccount, useraccountsTable, null)
            {
                IsSharedTablePrincipal = true,
            };
            useraccountsTable.AddTypeMapping(useraccountsTableMapping, false);
            tableMappings.Add(useraccountsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, userAccount.FindProperty("Id")!, useraccountsTableMapping);
            RelationalModel.CreateColumnMapping(credentialsChangeDateColumn, userAccount.FindProperty("CredentialsChangeDate")!, useraccountsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, userAccount.FindProperty("Description")!, useraccountsTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, userAccount.FindProperty("Email")!, useraccountsTableMapping);
            RelationalModel.CreateColumnMapping(hashedPasswordColumn, userAccount.FindProperty("HashedPassword")!, useraccountsTableMapping);
            RelationalModel.CreateColumnMapping(identityNameColumn, userAccount.FindProperty("IdentityName")!, useraccountsTableMapping);
            RelationalModel.CreateColumnMapping(isOnlineColumn, userAccount.FindProperty("IsOnline")!, useraccountsTableMapping);
            RelationalModel.CreateColumnMapping(nicknameColumn, userAccount.FindProperty("Nickname")!, useraccountsTableMapping);
            RelationalModel.CreateColumnMapping(registrationDateColumn, userAccount.FindProperty("RegistrationDate")!, useraccountsTableMapping);
            RelationalModel.CreateColumnMapping(selectedStatusColumn, userAccount.FindProperty("SelectedStatus")!, useraccountsTableMapping);

            var mediaFileMeta = FindEntityType("Razdor.Shared.Domain.MediaFileMeta")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            mediaFileMeta.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var razdorSharedDomainMediaFileMetaTableBase = new TableBase("Razdor.Shared.Domain.MediaFileMeta", null, relationalModel);
            var fileNameColumnBase = new ColumnBase<ColumnMappingBase>("FileName", "text", razdorSharedDomainMediaFileMetaTableBase);
            razdorSharedDomainMediaFileMetaTableBase.Columns.Add("FileName", fileNameColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "numeric(20,0)", razdorSharedDomainMediaFileMetaTableBase);
            razdorSharedDomainMediaFileMetaTableBase.Columns.Add("Id", idColumnBase0);
            var mediaTypeColumnBase = new ColumnBase<ColumnMappingBase>("MediaType", "text", razdorSharedDomainMediaFileMetaTableBase);
            razdorSharedDomainMediaFileMetaTableBase.Columns.Add("MediaType", mediaTypeColumnBase);
            var sizeColumnBase = new ColumnBase<ColumnMappingBase>("Size", "bigint", razdorSharedDomainMediaFileMetaTableBase);
            razdorSharedDomainMediaFileMetaTableBase.Columns.Add("Size", sizeColumnBase);
            var sourceUrlColumnBase = new ColumnBase<ColumnMappingBase>("SourceUrl", "text", razdorSharedDomainMediaFileMetaTableBase);
            razdorSharedDomainMediaFileMetaTableBase.Columns.Add("SourceUrl", sourceUrlColumnBase);
            relationalModel.DefaultTables.Add("Razdor.Shared.Domain.MediaFileMeta", razdorSharedDomainMediaFileMetaTableBase);
            var razdorSharedDomainMediaFileMetaMappingBase = new TableMappingBase<ColumnMappingBase>(mediaFileMeta, razdorSharedDomainMediaFileMetaTableBase, null);
            razdorSharedDomainMediaFileMetaTableBase.AddTypeMapping(razdorSharedDomainMediaFileMetaMappingBase, false);
            defaultTableMappings0.Add(razdorSharedDomainMediaFileMetaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, mediaFileMeta.FindProperty("Id")!, razdorSharedDomainMediaFileMetaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fileNameColumnBase, mediaFileMeta.FindProperty("FileName")!, razdorSharedDomainMediaFileMetaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)mediaTypeColumnBase, mediaFileMeta.FindProperty("MediaType")!, razdorSharedDomainMediaFileMetaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sizeColumnBase, mediaFileMeta.FindProperty("Size")!, razdorSharedDomainMediaFileMetaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sourceUrlColumnBase, mediaFileMeta.FindProperty("SourceUrl")!, razdorSharedDomainMediaFileMetaMappingBase);

            var tableMappings0 = new List<TableMapping>();
            mediaFileMeta.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var useraccountsTableMapping0 = new TableMapping(mediaFileMeta, useraccountsTable, null)
            {
                IsSharedTablePrincipal = false,
            };
            useraccountsTable.AddTypeMapping(useraccountsTableMapping0, true);
            tableMappings0.Add(useraccountsTableMapping0);
            useraccountsTable.AddRowInternalForeignKey(mediaFileMeta, RelationalModel.GetForeignKey(this,
                "Razdor.Shared.Domain.MediaFileMeta",
                new[] { "Id" },
                "Razdor.Identity.Domain.Users.UserAccount",
                new[] { "Id" }));
            RelationalModel.CreateColumnMapping(idColumn, mediaFileMeta.FindProperty("Id")!, useraccountsTableMapping0);
            RelationalModel.CreateColumnMapping(avatar_FileNameColumn, mediaFileMeta.FindProperty("FileName")!, useraccountsTableMapping0);
            RelationalModel.CreateColumnMapping(avatar_MediaTypeColumn, mediaFileMeta.FindProperty("MediaType")!, useraccountsTableMapping0);
            RelationalModel.CreateColumnMapping(avatar_SizeColumn, mediaFileMeta.FindProperty("Size")!, useraccountsTableMapping0);
            RelationalModel.CreateColumnMapping(avatar_SourceUrlColumn, mediaFileMeta.FindProperty("SourceUrl")!, useraccountsTableMapping0);
            var pK_useraccounts = new UniqueConstraint("PK_user-accounts", useraccountsTable, new[] { idColumn });
            useraccountsTable.PrimaryKey = pK_useraccounts;
            pK_useraccounts.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<decimal>(pK_useraccounts));
            var pK_useraccountsKey = RelationalModel.GetKey(this,
                "Razdor.Identity.Domain.Users.UserAccount",
                new[] { "Id" });
            pK_useraccounts.MappedKeys.Add(pK_useraccountsKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_useraccountsKey).Add(pK_useraccounts);
            var pK_useraccountsKey0 = RelationalModel.GetKey(this,
                "Razdor.Shared.Domain.MediaFileMeta",
                new[] { "Id" });
            pK_useraccounts.MappedKeys.Add(pK_useraccountsKey0);
            RelationalModel.GetOrCreateUniqueConstraints(pK_useraccountsKey0).Add(pK_useraccounts);
            useraccountsTable.UniqueConstraints.Add("PK_user-accounts", pK_useraccounts);
            var iX_useraccounts_Email = new TableIndex(
            "IX_user-accounts_Email", useraccountsTable, new[] { emailColumn }, true);
            iX_useraccounts_Email.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<string>(iX_useraccounts_Email));
            var iX_useraccounts_EmailIx = RelationalModel.GetIndex(this,
                "Razdor.Identity.Domain.Users.UserAccount",
                new[] { "Email" });
            iX_useraccounts_Email.MappedIndexes.Add(iX_useraccounts_EmailIx);
            RelationalModel.GetOrCreateTableIndexes(iX_useraccounts_EmailIx).Add(iX_useraccounts_Email);
            useraccountsTable.Indexes.Add("IX_user-accounts_Email", iX_useraccounts_Email);
            var iX_useraccounts_IdentityName = new TableIndex(
            "IX_user-accounts_IdentityName", useraccountsTable, new[] { identityNameColumn }, true);
            iX_useraccounts_IdentityName.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<string>(iX_useraccounts_IdentityName));
            var iX_useraccounts_IdentityNameIx = RelationalModel.GetIndex(this,
                "Razdor.Identity.Domain.Users.UserAccount",
                new[] { "IdentityName" });
            iX_useraccounts_IdentityName.MappedIndexes.Add(iX_useraccounts_IdentityNameIx);
            RelationalModel.GetOrCreateTableIndexes(iX_useraccounts_IdentityNameIx).Add(iX_useraccounts_IdentityName);
            useraccountsTable.Indexes.Add("IX_user-accounts_IdentityName", iX_useraccounts_IdentityName);
            return relationalModel.MakeReadOnly();
        }
    }
}
