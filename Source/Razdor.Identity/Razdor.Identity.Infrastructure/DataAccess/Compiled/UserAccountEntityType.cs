// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping;
using Razdor.Identity.Domain.Users;
using Razdor.Shared.Domain;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Razdor.Identity.Infrastructure.DataAccess
{
    [EntityFrameworkInternal]
    public partial class UserAccountEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Razdor.Identity.Domain.Users.UserAccount",
                typeof(UserAccount),
                baseEntityType,
                propertyCount: 10,
                navigationCount: 1,
                unnamedIndexCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(ulong),
                propertyInfo: typeof(BaseSnowflakeEntity).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BaseSnowflakeEntity).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.SetGetter(
                ulong (UserAccount entity) => BaseSnowflakeEntityUnsafeAccessors.Id(entity),
                bool (UserAccount entity) => BaseSnowflakeEntityUnsafeAccessors.Id(entity) == 0UL,
                ulong (UserAccount instance) => BaseSnowflakeEntityUnsafeAccessors.Id(instance),
                bool (UserAccount instance) => BaseSnowflakeEntityUnsafeAccessors.Id(instance) == 0UL);
            id.SetSetter(
                (UserAccount entity, ulong value) => BaseSnowflakeEntityUnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (UserAccount entity, ulong value) => BaseSnowflakeEntityUnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                ulong (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<ulong>(0) : (entry.FlaggedAsTemporary(0) && BaseSnowflakeEntityUnsafeAccessors.Id(((UserAccount)(entry.Entity))) == 0UL ? entry.ReadTemporaryValue<ulong>(0) : BaseSnowflakeEntityUnsafeAccessors.Id(((UserAccount)(entry.Entity))))),
                ulong (InternalEntityEntry entry) => BaseSnowflakeEntityUnsafeAccessors.Id(((UserAccount)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(id, 0),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            id.TypeMapping = NpgsqlDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    bool (decimal v1, decimal v2) => v1 == v2,
                    int (decimal v) => ((object)v).GetHashCode(),
                    decimal (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "numeric(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<ulong, decimal>(
                    decimal (ulong v) => ((decimal)(v)),
                    ulong (decimal v) => ((ulong)(v))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<ulong, decimal>(
                        decimal (ulong v) => ((decimal)(v)),
                        ulong (decimal v) => ((ulong)(v)))));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(id));
            id.SetSentinelFromProviderValue(0m);
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var credentialsChangeDate = runtimeEntityType.AddProperty(
                "CredentialsChangeDate",
                typeof(DateTimeOffset),
                propertyInfo: typeof(UserAccount).GetProperty("CredentialsChangeDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UserAccount).GetField("<CredentialsChangeDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));
            credentialsChangeDate.SetGetter(
                DateTimeOffset (UserAccount entity) => UserAccountUnsafeAccessors.CredentialsChangeDate(entity),
                bool (UserAccount entity) => UserAccountUnsafeAccessors.CredentialsChangeDate(entity).EqualsExact(default(DateTimeOffset)),
                DateTimeOffset (UserAccount instance) => UserAccountUnsafeAccessors.CredentialsChangeDate(instance),
                bool (UserAccount instance) => UserAccountUnsafeAccessors.CredentialsChangeDate(instance).EqualsExact(default(DateTimeOffset)));
            credentialsChangeDate.SetSetter(
                (UserAccount entity, DateTimeOffset value) => UserAccountUnsafeAccessors.CredentialsChangeDate(entity) = value);
            credentialsChangeDate.SetMaterializationSetter(
                (UserAccount entity, DateTimeOffset value) => UserAccountUnsafeAccessors.CredentialsChangeDate(entity) = value);
            credentialsChangeDate.SetAccessors(
                DateTimeOffset (InternalEntityEntry entry) => UserAccountUnsafeAccessors.CredentialsChangeDate(((UserAccount)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => UserAccountUnsafeAccessors.CredentialsChangeDate(((UserAccount)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset>(credentialsChangeDate, 1),
                DateTimeOffset (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset>(credentialsChangeDate),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            credentialsChangeDate.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            credentialsChangeDate.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                clrType: typeof(DateTimeOffset),
                jsonValueReaderWriter: new NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter());
            credentialsChangeDate.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var description = runtimeEntityType.AddProperty(
                "Description",
                typeof(string),
                propertyInfo: typeof(UserAccount).GetProperty("Description", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UserAccount).GetField("<Description>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 300);
            description.SetGetter(
                string (UserAccount entity) => UserAccountUnsafeAccessors.Description(entity),
                bool (UserAccount entity) => UserAccountUnsafeAccessors.Description(entity) == null,
                string (UserAccount instance) => UserAccountUnsafeAccessors.Description(instance),
                bool (UserAccount instance) => UserAccountUnsafeAccessors.Description(instance) == null);
            description.SetSetter(
                (UserAccount entity, string value) => UserAccountUnsafeAccessors.Description(entity) = value);
            description.SetMaterializationSetter(
                (UserAccount entity, string value) => UserAccountUnsafeAccessors.Description(entity) = value);
            description.SetAccessors(
                string (InternalEntityEntry entry) => UserAccountUnsafeAccessors.Description(((UserAccount)(entry.Entity))),
                string (InternalEntityEntry entry) => UserAccountUnsafeAccessors.Description(((UserAccount)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(description, 2),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(description),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            description.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            description.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "character varying(300)",
                    size: 300));
            description.TypeMapping = ((NpgsqlStringTypeMapping)description.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
        description.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var email = runtimeEntityType.AddProperty(
            "Email",
            typeof(string),
            propertyInfo: typeof(UserAccount).GetProperty("Email", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(UserAccount).GetField("<Email>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
        email.SetGetter(
            string (UserAccount entity) => UserAccountUnsafeAccessors.Email(entity),
            bool (UserAccount entity) => UserAccountUnsafeAccessors.Email(entity) == null,
            string (UserAccount instance) => UserAccountUnsafeAccessors.Email(instance),
            bool (UserAccount instance) => UserAccountUnsafeAccessors.Email(instance) == null);
        email.SetSetter(
            (UserAccount entity, string value) => UserAccountUnsafeAccessors.Email(entity) = value);
        email.SetMaterializationSetter(
            (UserAccount entity, string value) => UserAccountUnsafeAccessors.Email(entity) = value);
        email.SetAccessors(
            string (InternalEntityEntry entry) => UserAccountUnsafeAccessors.Email(((UserAccount)(entry.Entity))),
            string (InternalEntityEntry entry) => UserAccountUnsafeAccessors.Email(((UserAccount)(entry.Entity))),
            string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(email, 3),
            string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(email),
            object (ValueBuffer valueBuffer) => valueBuffer[3]);
        email.SetPropertyIndexes(
            index: 3,
            originalValueIndex: 3,
            shadowIndex: -1,
            relationshipIndex: -1,
            storeGenerationIndex: -1);
        email.TypeMapping = StringTypeMapping.Default.Clone(
            comparer: new ValueComparer<string>(
                bool (string v1, string v2) => v1 == v2,
                int (string v) => ((object)v).GetHashCode(),
                string (string v) => v),
            keyComparer: new ValueComparer<string>(
                bool (string v1, string v2) => v1 == v2,
                int (string v) => ((object)v).GetHashCode(),
                string (string v) => v),
            providerValueComparer: new ValueComparer<string>(
                bool (string v1, string v2) => v1 == v2,
                int (string v) => ((object)v).GetHashCode(),
                string (string v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                dbType: System.Data.DbType.String));
        email.SetCurrentValueComparer(new EntryCurrentValueComparer<string>(email));
        email.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var hashedPassword = runtimeEntityType.AddProperty(
            "HashedPassword",
            typeof(string),
            propertyInfo: typeof(UserAccount).GetProperty("HashedPassword", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(UserAccount).GetField("<HashedPassword>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            nullable: true);
        hashedPassword.SetGetter(
            string (UserAccount entity) => UserAccountUnsafeAccessors.HashedPassword(entity),
            bool (UserAccount entity) => UserAccountUnsafeAccessors.HashedPassword(entity) == null,
            string (UserAccount instance) => UserAccountUnsafeAccessors.HashedPassword(instance),
            bool (UserAccount instance) => UserAccountUnsafeAccessors.HashedPassword(instance) == null);
        hashedPassword.SetSetter(
            (UserAccount entity, string value) => UserAccountUnsafeAccessors.HashedPassword(entity) = value);
        hashedPassword.SetMaterializationSetter(
            (UserAccount entity, string value) => UserAccountUnsafeAccessors.HashedPassword(entity) = value);
        hashedPassword.SetAccessors(
            string (InternalEntityEntry entry) => UserAccountUnsafeAccessors.HashedPassword(((UserAccount)(entry.Entity))),
            string (InternalEntityEntry entry) => UserAccountUnsafeAccessors.HashedPassword(((UserAccount)(entry.Entity))),
            string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(hashedPassword, 4),
            string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(hashedPassword),
            object (ValueBuffer valueBuffer) => valueBuffer[4]);
        hashedPassword.SetPropertyIndexes(
            index: 4,
            originalValueIndex: 4,
            shadowIndex: -1,
            relationshipIndex: -1,
            storeGenerationIndex: -1);
        hashedPassword.TypeMapping = StringTypeMapping.Default.Clone(
            comparer: new ValueComparer<string>(
                bool (string v1, string v2) => v1 == v2,
                int (string v) => ((object)v).GetHashCode(),
                string (string v) => v),
            keyComparer: new ValueComparer<string>(
                bool (string v1, string v2) => v1 == v2,
                int (string v) => ((object)v).GetHashCode(),
                string (string v) => v),
            providerValueComparer: new ValueComparer<string>(
                bool (string v1, string v2) => v1 == v2,
                int (string v) => ((object)v).GetHashCode(),
                string (string v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                dbType: System.Data.DbType.String));
        hashedPassword.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var identityName = runtimeEntityType.AddProperty(
            "IdentityName",
            typeof(string),
            propertyInfo: typeof(UserAccount).GetProperty("IdentityName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(UserAccount).GetField("<IdentityName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            maxLength: 50);
        identityName.SetGetter(
            string (UserAccount entity) => UserAccountUnsafeAccessors.IdentityName(entity),
            bool (UserAccount entity) => UserAccountUnsafeAccessors.IdentityName(entity) == null,
            string (UserAccount instance) => UserAccountUnsafeAccessors.IdentityName(instance),
            bool (UserAccount instance) => UserAccountUnsafeAccessors.IdentityName(instance) == null);
        identityName.SetSetter(
            (UserAccount entity, string value) => UserAccountUnsafeAccessors.IdentityName(entity) = value);
        identityName.SetMaterializationSetter(
            (UserAccount entity, string value) => UserAccountUnsafeAccessors.IdentityName(entity) = value);
        identityName.SetAccessors(
            string (InternalEntityEntry entry) => UserAccountUnsafeAccessors.IdentityName(((UserAccount)(entry.Entity))),
            string (InternalEntityEntry entry) => UserAccountUnsafeAccessors.IdentityName(((UserAccount)(entry.Entity))),
            string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(identityName, 5),
            string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(identityName),
            object (ValueBuffer valueBuffer) => valueBuffer[5]);
        identityName.SetPropertyIndexes(
            index: 5,
            originalValueIndex: 5,
            shadowIndex: -1,
            relationshipIndex: -1,
            storeGenerationIndex: -1);
        identityName.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
            comparer: new ValueComparer<string>(
                bool (string v1, string v2) => v1 == v2,
                int (string v) => ((object)v).GetHashCode(),
                string (string v) => v),
            keyComparer: new ValueComparer<string>(
                bool (string v1, string v2) => v1 == v2,
                int (string v) => ((object)v).GetHashCode(),
                string (string v) => v),
            providerValueComparer: new ValueComparer<string>(
                bool (string v1, string v2) => v1 == v2,
                int (string v) => ((object)v).GetHashCode(),
                string (string v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                storeTypeName: "character varying(50)",
                size: 50));
        identityName.TypeMapping = ((NpgsqlStringTypeMapping)identityName.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
    identityName.SetCurrentValueComparer(new EntryCurrentValueComparer<string>(identityName));
    identityName.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

    var isOnline = runtimeEntityType.AddProperty(
        "IsOnline",
        typeof(bool),
        propertyInfo: typeof(UserAccount).GetProperty("IsOnline", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(UserAccount).GetField("_isOnline", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        propertyAccessMode: PropertyAccessMode.Field,
        sentinel: false);
    isOnline.SetGetter(
        bool (UserAccount entity) => UserAccountUnsafeAccessors._isOnline(entity),
        bool (UserAccount entity) => UserAccountUnsafeAccessors._isOnline(entity) == false,
        bool (UserAccount instance) => UserAccountUnsafeAccessors._isOnline(instance),
        bool (UserAccount instance) => UserAccountUnsafeAccessors._isOnline(instance) == false);
    isOnline.SetSetter(
        (UserAccount entity, bool value) => UserAccountUnsafeAccessors._isOnline(entity) = value);
    isOnline.SetMaterializationSetter(
        (UserAccount entity, bool value) => UserAccountUnsafeAccessors._isOnline(entity) = value);
    isOnline.SetAccessors(
        bool (InternalEntityEntry entry) => UserAccountUnsafeAccessors._isOnline(((UserAccount)(entry.Entity))),
        bool (InternalEntityEntry entry) => UserAccountUnsafeAccessors._isOnline(((UserAccount)(entry.Entity))),
        bool (InternalEntityEntry entry) => entry.ReadOriginalValue<bool>(isOnline, 6),
        bool (InternalEntityEntry entry) => entry.GetCurrentValue<bool>(isOnline),
        object (ValueBuffer valueBuffer) => valueBuffer[6]);
    isOnline.SetPropertyIndexes(
        index: 6,
        originalValueIndex: 6,
        shadowIndex: -1,
        relationshipIndex: -1,
        storeGenerationIndex: -1);
    isOnline.TypeMapping = NpgsqlBoolTypeMapping.Default.Clone(
        comparer: new ValueComparer<bool>(
            bool (bool v1, bool v2) => v1 == v2,
            int (bool v) => ((object)v).GetHashCode(),
            bool (bool v) => v),
        keyComparer: new ValueComparer<bool>(
            bool (bool v1, bool v2) => v1 == v2,
            int (bool v) => ((object)v).GetHashCode(),
            bool (bool v) => v),
        providerValueComparer: new ValueComparer<bool>(
            bool (bool v1, bool v2) => v1 == v2,
            int (bool v) => ((object)v).GetHashCode(),
            bool (bool v) => v));
    isOnline.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

    var nickname = runtimeEntityType.AddProperty(
        "Nickname",
        typeof(string),
        propertyInfo: typeof(UserAccount).GetProperty("Nickname", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(UserAccount).GetField("_nickname", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        propertyAccessMode: PropertyAccessMode.Field,
        nullable: true);
    nickname.SetGetter(
        string (UserAccount entity) => UserAccountUnsafeAccessors._nickname(entity),
        bool (UserAccount entity) => UserAccountUnsafeAccessors._nickname(entity) == null,
        string (UserAccount instance) => UserAccountUnsafeAccessors._nickname(instance),
        bool (UserAccount instance) => UserAccountUnsafeAccessors._nickname(instance) == null);
    nickname.SetSetter(
        (UserAccount entity, string value) => UserAccountUnsafeAccessors._nickname(entity) = value);
    nickname.SetMaterializationSetter(
        (UserAccount entity, string value) => UserAccountUnsafeAccessors._nickname(entity) = value);
    nickname.SetAccessors(
        string (InternalEntityEntry entry) => UserAccountUnsafeAccessors._nickname(((UserAccount)(entry.Entity))),
        string (InternalEntityEntry entry) => UserAccountUnsafeAccessors._nickname(((UserAccount)(entry.Entity))),
        string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(nickname, 7),
        string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(nickname),
        object (ValueBuffer valueBuffer) => valueBuffer[7]);
    nickname.SetPropertyIndexes(
        index: 7,
        originalValueIndex: 7,
        shadowIndex: -1,
        relationshipIndex: -1,
        storeGenerationIndex: -1);
    nickname.TypeMapping = StringTypeMapping.Default.Clone(
        comparer: new ValueComparer<string>(
            bool (string v1, string v2) => v1 == v2,
            int (string v) => ((object)v).GetHashCode(),
            string (string v) => v),
        keyComparer: new ValueComparer<string>(
            bool (string v1, string v2) => v1 == v2,
            int (string v) => ((object)v).GetHashCode(),
            string (string v) => v),
        providerValueComparer: new ValueComparer<string>(
            bool (string v1, string v2) => v1 == v2,
            int (string v) => ((object)v).GetHashCode(),
            string (string v) => v),
        mappingInfo: new RelationalTypeMappingInfo(
            dbType: System.Data.DbType.String));
    nickname.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

    var registrationDate = runtimeEntityType.AddProperty(
        "RegistrationDate",
        typeof(DateTimeOffset),
        propertyInfo: typeof(UserAccount).GetProperty("RegistrationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(UserAccount).GetField("<RegistrationDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        sentinel: new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));
    registrationDate.SetGetter(
        DateTimeOffset (UserAccount entity) => UserAccountUnsafeAccessors.RegistrationDate(entity),
        bool (UserAccount entity) => UserAccountUnsafeAccessors.RegistrationDate(entity).EqualsExact(default(DateTimeOffset)),
        DateTimeOffset (UserAccount instance) => UserAccountUnsafeAccessors.RegistrationDate(instance),
        bool (UserAccount instance) => UserAccountUnsafeAccessors.RegistrationDate(instance).EqualsExact(default(DateTimeOffset)));
    registrationDate.SetSetter(
        (UserAccount entity, DateTimeOffset value) => UserAccountUnsafeAccessors.RegistrationDate(entity) = value);
    registrationDate.SetMaterializationSetter(
        (UserAccount entity, DateTimeOffset value) => UserAccountUnsafeAccessors.RegistrationDate(entity) = value);
    registrationDate.SetAccessors(
        DateTimeOffset (InternalEntityEntry entry) => UserAccountUnsafeAccessors.RegistrationDate(((UserAccount)(entry.Entity))),
        DateTimeOffset (InternalEntityEntry entry) => UserAccountUnsafeAccessors.RegistrationDate(((UserAccount)(entry.Entity))),
        DateTimeOffset (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset>(registrationDate, 8),
        DateTimeOffset (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset>(registrationDate),
        object (ValueBuffer valueBuffer) => valueBuffer[8]);
    registrationDate.SetPropertyIndexes(
        index: 8,
        originalValueIndex: 8,
        shadowIndex: -1,
        relationshipIndex: -1,
        storeGenerationIndex: -1);
    registrationDate.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
        comparer: new ValueComparer<DateTimeOffset>(
            bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
            int (DateTimeOffset v) => ((object)v).GetHashCode(),
            DateTimeOffset (DateTimeOffset v) => v),
        keyComparer: new ValueComparer<DateTimeOffset>(
            bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
            int (DateTimeOffset v) => ((object)v).GetHashCode(),
            DateTimeOffset (DateTimeOffset v) => v),
        providerValueComparer: new ValueComparer<DateTimeOffset>(
            bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
            int (DateTimeOffset v) => ((object)v).GetHashCode(),
            DateTimeOffset (DateTimeOffset v) => v),
        clrType: typeof(DateTimeOffset),
        jsonValueReaderWriter: new NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter());
    registrationDate.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

    var selectedStatus = runtimeEntityType.AddProperty(
        "SelectedStatus",
        typeof(SelectedCommunicationStatus),
        propertyInfo: typeof(UserAccount).GetProperty("SelectedStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(UserAccount).GetField("_selectedStatus", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        propertyAccessMode: PropertyAccessMode.Field);
    selectedStatus.SetGetter(
        SelectedCommunicationStatus (UserAccount entity) => UserAccountUnsafeAccessors._selectedStatus(entity),
        bool (UserAccount entity) => object.Equals(((object)(UserAccountUnsafeAccessors._selectedStatus(entity))), ((object)(SelectedCommunicationStatus.Online))),
        SelectedCommunicationStatus (UserAccount instance) => UserAccountUnsafeAccessors._selectedStatus(instance),
        bool (UserAccount instance) => object.Equals(((object)(UserAccountUnsafeAccessors._selectedStatus(instance))), ((object)(SelectedCommunicationStatus.Online))));
    selectedStatus.SetSetter(
        (UserAccount entity, SelectedCommunicationStatus value) => UserAccountUnsafeAccessors._selectedStatus(entity) = value);
    selectedStatus.SetMaterializationSetter(
        (UserAccount entity, SelectedCommunicationStatus value) => UserAccountUnsafeAccessors._selectedStatus(entity) = value);
    selectedStatus.SetAccessors(
        SelectedCommunicationStatus (InternalEntityEntry entry) => UserAccountUnsafeAccessors._selectedStatus(((UserAccount)(entry.Entity))),
        SelectedCommunicationStatus (InternalEntityEntry entry) => UserAccountUnsafeAccessors._selectedStatus(((UserAccount)(entry.Entity))),
        SelectedCommunicationStatus (InternalEntityEntry entry) => entry.ReadOriginalValue<SelectedCommunicationStatus>(selectedStatus, 9),
        SelectedCommunicationStatus (InternalEntityEntry entry) => entry.GetCurrentValue<SelectedCommunicationStatus>(selectedStatus),
        object (ValueBuffer valueBuffer) => valueBuffer[9]);
    selectedStatus.SetPropertyIndexes(
        index: 9,
        originalValueIndex: 9,
        shadowIndex: -1,
        relationshipIndex: -1,
        storeGenerationIndex: -1);
    selectedStatus.TypeMapping = IntTypeMapping.Default.Clone(
        comparer: new ValueComparer<SelectedCommunicationStatus>(
            bool (SelectedCommunicationStatus v1, SelectedCommunicationStatus v2) => object.Equals(((object)(v1)), ((object)(v2))),
            int (SelectedCommunicationStatus v) => ((object)v).GetHashCode(),
            SelectedCommunicationStatus (SelectedCommunicationStatus v) => v),
        keyComparer: new ValueComparer<SelectedCommunicationStatus>(
            bool (SelectedCommunicationStatus v1, SelectedCommunicationStatus v2) => object.Equals(((object)(v1)), ((object)(v2))),
            int (SelectedCommunicationStatus v) => ((object)v).GetHashCode(),
            SelectedCommunicationStatus (SelectedCommunicationStatus v) => v),
        providerValueComparer: new ValueComparer<int>(
            bool (int v1, int v2) => v1 == v2,
            int (int v) => v,
            int (int v) => v),
        mappingInfo: new RelationalTypeMappingInfo(
            storeTypeName: "integer"),
        converter: new ValueConverter<SelectedCommunicationStatus, int>(
            int (SelectedCommunicationStatus value) => ((int)(value)),
            SelectedCommunicationStatus (int value) => ((SelectedCommunicationStatus)(value))),
        jsonValueReaderWriter: new JsonConvertedValueReaderWriter<SelectedCommunicationStatus, int>(
            JsonInt32ReaderWriter.Instance,
            new ValueConverter<SelectedCommunicationStatus, int>(
                int (SelectedCommunicationStatus value) => ((int)(value)),
                SelectedCommunicationStatus (int value) => ((SelectedCommunicationStatus)(value)))));
    selectedStatus.SetSentinelFromProviderValue(0);
    selectedStatus.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

    var key = runtimeEntityType.AddKey(
        new[] { id });
    runtimeEntityType.SetPrimaryKey(key);

    var index = runtimeEntityType.AddIndex(
        new[] { email },
        unique: true);

    var index0 = runtimeEntityType.AddIndex(
        new[] { identityName },
        unique: true);

    return runtimeEntityType;
}

public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
{
    var id = runtimeEntityType.FindProperty("Id");
    var credentialsChangeDate = runtimeEntityType.FindProperty("CredentialsChangeDate");
    var description = runtimeEntityType.FindProperty("Description");
    var email = runtimeEntityType.FindProperty("Email");
    var hashedPassword = runtimeEntityType.FindProperty("HashedPassword");
    var identityName = runtimeEntityType.FindProperty("IdentityName");
    var isOnline = runtimeEntityType.FindProperty("IsOnline");
    var nickname = runtimeEntityType.FindProperty("Nickname");
    var registrationDate = runtimeEntityType.FindProperty("RegistrationDate");
    var selectedStatus = runtimeEntityType.FindProperty("SelectedStatus");
    var key = runtimeEntityType.FindKey(new[] { id });
    key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<ulong>(key));
    key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<ulong>(key));
    var avatar = runtimeEntityType.FindNavigation("Avatar");
    runtimeEntityType.SetOriginalValuesFactory(
        ISnapshot (InternalEntityEntry source) =>
        {
            var entity = ((UserAccount)(source.Entity));
            return ((ISnapshot)(new Snapshot<ulong, DateTimeOffset, string, string, string, string, bool, string, DateTimeOffset, SelectedCommunicationStatus>(((ValueComparer<ulong>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)), ((ValueComparer<DateTimeOffset>)(((IProperty)credentialsChangeDate).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTimeOffset>(credentialsChangeDate)), (source.GetCurrentValue<string>(description) == null ? null : ((ValueComparer<string>)(((IProperty)description).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(description))), (source.GetCurrentValue<string>(email) == null ? null : ((ValueComparer<string>)(((IProperty)email).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(email))), (source.GetCurrentValue<string>(hashedPassword) == null ? null : ((ValueComparer<string>)(((IProperty)hashedPassword).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(hashedPassword))), (source.GetCurrentValue<string>(identityName) == null ? null : ((ValueComparer<string>)(((IProperty)identityName).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(identityName))), ((ValueComparer<bool>)(((IProperty)isOnline).GetValueComparer())).Snapshot(source.GetCurrentValue<bool>(isOnline)), (source.GetCurrentValue<string>(nickname) == null ? null : ((ValueComparer<string>)(((IProperty)nickname).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(nickname))), ((ValueComparer<DateTimeOffset>)(((IProperty)registrationDate).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTimeOffset>(registrationDate)), ((ValueComparer<SelectedCommunicationStatus>)(((IProperty)selectedStatus).GetValueComparer())).Snapshot(source.GetCurrentValue<SelectedCommunicationStatus>(selectedStatus)))));
        });
    runtimeEntityType.SetStoreGeneratedValuesFactory(
        ISnapshot () => ((ISnapshot)(new Snapshot<ulong>(((ValueComparer<ulong>)(((IProperty)id).GetValueComparer())).Snapshot(default(ulong))))));
    runtimeEntityType.SetTemporaryValuesFactory(
        ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<ulong>(default(ulong)))));
    runtimeEntityType.SetShadowValuesFactory(
        ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
    runtimeEntityType.SetEmptyShadowValuesFactory(
        ISnapshot () => Snapshot.Empty);
    runtimeEntityType.SetRelationshipSnapshotFactory(
        ISnapshot (InternalEntityEntry source) =>
        {
            var entity = ((UserAccount)(source.Entity));
            return ((ISnapshot)(new Snapshot<ulong, object>(((ValueComparer<ulong>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)), UserAccountUnsafeAccessors._avatar(entity))));
        });
    runtimeEntityType.Counts = new PropertyCounts(
        propertyCount: 10,
        navigationCount: 1,
        complexPropertyCount: 0,
        originalValueCount: 10,
        shadowCount: 0,
        relationshipCount: 2,
        storeGeneratedCount: 1);
    runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
    runtimeEntityType.AddAnnotation("Relational:Schema", null);
    runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
    runtimeEntityType.AddAnnotation("Relational:TableName", "user-accounts");
    runtimeEntityType.AddAnnotation("Relational:ViewName", null);
    runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

    Customize(runtimeEntityType);
}

static partial void Customize(RuntimeEntityType runtimeEntityType);
}
}
