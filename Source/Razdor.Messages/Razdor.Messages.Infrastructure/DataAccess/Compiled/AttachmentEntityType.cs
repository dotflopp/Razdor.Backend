// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using MongoDB.EntityFrameworkCore.Storage;
using Razdor.Messages.Domain;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Razdor.Messages.Infrastructure.DataAccess
{
    [EntityFrameworkInternal]
    public partial class AttachmentEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Razdor.Messages.Domain.Attachment",
                typeof(Attachment),
                baseEntityType,
                propertyCount: 7,
                foreignKeyCount: 1,
                keyCount: 1);

            var messageId = runtimeEntityType.AddProperty(
                "MessageId",
                typeof(ulong),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0ul);
            messageId.SetAccessors(
                ulong (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<ulong>(0) : (entry.FlaggedAsTemporary(0) && entry.ReadShadowValue<ulong>(0) == 0UL ? entry.ReadTemporaryValue<ulong>(0) : entry.ReadShadowValue<ulong>(0))),
                ulong (InternalEntityEntry entry) => entry.ReadShadowValue<ulong>(0),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(messageId, 0),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(messageId, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            messageId.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: 0,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            messageId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));
            messageId.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(messageId));

            var id1 = runtimeEntityType.AddProperty(
                "Id1",
                typeof(int),
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id1.SetAccessors(
                int (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(1) ? entry.ReadStoreGeneratedValue<int>(1) : (entry.FlaggedAsTemporary(1) && entry.ReadShadowValue<int>(1) == 0 ? entry.ReadTemporaryValue<int>(1) : entry.ReadShadowValue<int>(1))),
                int (InternalEntityEntry entry) => entry.ReadShadowValue<int>(1),
                int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(id1, 1),
                int (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(id1, 1),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            id1.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: 1,
                relationshipIndex: 1,
                storeGenerationIndex: 1);
            id1.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                clrType: typeof(int));
            id1.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(id1));

            var fileName = runtimeEntityType.AddProperty(
                "FileName",
                typeof(string),
                propertyInfo: typeof(Attachment).GetProperty("FileName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Attachment).GetField("<FileName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            fileName.SetGetter(
                string (Attachment entity) => AttachmentUnsafeAccessors.FileName(entity),
                bool (Attachment entity) => AttachmentUnsafeAccessors.FileName(entity) == null,
                string (Attachment instance) => AttachmentUnsafeAccessors.FileName(instance),
                bool (Attachment instance) => AttachmentUnsafeAccessors.FileName(instance) == null);
            fileName.SetSetter(
                (Attachment entity, string value) => AttachmentUnsafeAccessors.FileName(entity) = value);
            fileName.SetMaterializationSetter(
                (Attachment entity, string value) => AttachmentUnsafeAccessors.FileName(entity) = value);
            fileName.SetAccessors(
                string (InternalEntityEntry entry) => AttachmentUnsafeAccessors.FileName(((Attachment)(entry.Entity))),
                string (InternalEntityEntry entry) => AttachmentUnsafeAccessors.FileName(((Attachment)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(fileName, 2),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(fileName),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            fileName.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            fileName.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string));

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(ulong),
                propertyInfo: typeof(Attachment).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Attachment).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0ul);
            id.SetGetter(
                ulong (Attachment entity) => AttachmentUnsafeAccessors.Id(entity),
                bool (Attachment entity) => AttachmentUnsafeAccessors.Id(entity) == 0UL,
                ulong (Attachment instance) => AttachmentUnsafeAccessors.Id(instance),
                bool (Attachment instance) => AttachmentUnsafeAccessors.Id(instance) == 0UL);
            id.SetSetter(
                (Attachment entity, ulong value) => AttachmentUnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (Attachment entity, ulong value) => AttachmentUnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                ulong (InternalEntityEntry entry) => AttachmentUnsafeAccessors.Id(((Attachment)(entry.Entity))),
                ulong (InternalEntityEntry entry) => AttachmentUnsafeAccessors.Id(((Attachment)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(id, 3),
                ulong (InternalEntityEntry entry) => entry.GetCurrentValue<ulong>(id),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            id.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            id.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));

            var mediaType = runtimeEntityType.AddProperty(
                "MediaType",
                typeof(string),
                propertyInfo: typeof(Attachment).GetProperty("MediaType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Attachment).GetField("<MediaType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            mediaType.SetGetter(
                string (Attachment entity) => AttachmentUnsafeAccessors.MediaType(entity),
                bool (Attachment entity) => AttachmentUnsafeAccessors.MediaType(entity) == null,
                string (Attachment instance) => AttachmentUnsafeAccessors.MediaType(instance),
                bool (Attachment instance) => AttachmentUnsafeAccessors.MediaType(instance) == null);
            mediaType.SetSetter(
                (Attachment entity, string value) => AttachmentUnsafeAccessors.MediaType(entity) = value);
            mediaType.SetMaterializationSetter(
                (Attachment entity, string value) => AttachmentUnsafeAccessors.MediaType(entity) = value);
            mediaType.SetAccessors(
                string (InternalEntityEntry entry) => AttachmentUnsafeAccessors.MediaType(((Attachment)(entry.Entity))),
                string (InternalEntityEntry entry) => AttachmentUnsafeAccessors.MediaType(((Attachment)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(mediaType, 4),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(mediaType),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            mediaType.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            mediaType.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string));

            var size = runtimeEntityType.AddProperty(
                "Size",
                typeof(long),
                propertyInfo: typeof(Attachment).GetProperty("Size", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Attachment).GetField("<Size>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            size.SetGetter(
                long (Attachment entity) => AttachmentUnsafeAccessors.Size(entity),
                bool (Attachment entity) => AttachmentUnsafeAccessors.Size(entity) == 0L,
                long (Attachment instance) => AttachmentUnsafeAccessors.Size(instance),
                bool (Attachment instance) => AttachmentUnsafeAccessors.Size(instance) == 0L);
            size.SetSetter(
                (Attachment entity, long value) => AttachmentUnsafeAccessors.Size(entity) = value);
            size.SetMaterializationSetter(
                (Attachment entity, long value) => AttachmentUnsafeAccessors.Size(entity) = value);
            size.SetAccessors(
                long (InternalEntityEntry entry) => AttachmentUnsafeAccessors.Size(((Attachment)(entry.Entity))),
                long (InternalEntityEntry entry) => AttachmentUnsafeAccessors.Size(((Attachment)(entry.Entity))),
                long (InternalEntityEntry entry) => entry.ReadOriginalValue<long>(size, 5),
                long (InternalEntityEntry entry) => entry.GetCurrentValue<long>(size),
                object (ValueBuffer valueBuffer) => valueBuffer[5]);
            size.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            size.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                keyComparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                providerValueComparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                clrType: typeof(long));

            var sourceUrl = runtimeEntityType.AddProperty(
                "SourceUrl",
                typeof(string),
                propertyInfo: typeof(Attachment).GetProperty("SourceUrl", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Attachment).GetField("<SourceUrl>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            sourceUrl.SetGetter(
                string (Attachment entity) => AttachmentUnsafeAccessors.SourceUrl(entity),
                bool (Attachment entity) => AttachmentUnsafeAccessors.SourceUrl(entity) == null,
                string (Attachment instance) => AttachmentUnsafeAccessors.SourceUrl(instance),
                bool (Attachment instance) => AttachmentUnsafeAccessors.SourceUrl(instance) == null);
            sourceUrl.SetSetter(
                (Attachment entity, string value) => AttachmentUnsafeAccessors.SourceUrl(entity) = value);
            sourceUrl.SetMaterializationSetter(
                (Attachment entity, string value) => AttachmentUnsafeAccessors.SourceUrl(entity) = value);
            sourceUrl.SetAccessors(
                string (InternalEntityEntry entry) => AttachmentUnsafeAccessors.SourceUrl(((Attachment)(entry.Entity))),
                string (InternalEntityEntry entry) => AttachmentUnsafeAccessors.SourceUrl(((Attachment)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(sourceUrl, 6),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(sourceUrl),
                object (ValueBuffer valueBuffer) => valueBuffer[6]);
            sourceUrl.SetPropertyIndexes(
                index: 6,
                originalValueIndex: 6,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            sourceUrl.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string));

            var key = runtimeEntityType.AddKey(
                new[] { messageId, id1 });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MessageId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true,
                ownership: true);

            var _attachments = principalEntityType.AddNavigation("_attachments",
                runtimeForeignKey,
                onDependent: false,
                typeof(List<Attachment>),
                fieldInfo: typeof(Message).GetField("_attachments", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                eagerLoaded: true);

            _attachments.SetGetter(
                List<Attachment> (Message entity) => MessageUnsafeAccessors._attachments(entity),
                bool (Message entity) => MessageUnsafeAccessors._attachments(entity) == null,
                List<Attachment> (Message instance) => MessageUnsafeAccessors._attachments(instance),
                bool (Message instance) => MessageUnsafeAccessors._attachments(instance) == null);
            _attachments.SetSetter(
                (Message entity, List<Attachment> value) => MessageUnsafeAccessors._attachments(entity) = value);
            _attachments.SetMaterializationSetter(
                (Message entity, List<Attachment> value) => MessageUnsafeAccessors._attachments(entity) = value);
            _attachments.SetAccessors(
                List<Attachment> (InternalEntityEntry entry) => MessageUnsafeAccessors._attachments(((Message)(entry.Entity))),
                List<Attachment> (InternalEntityEntry entry) => MessageUnsafeAccessors._attachments(((Message)(entry.Entity))),
                null,
                List<Attachment> (InternalEntityEntry entry) => entry.GetCurrentValue<List<Attachment>>(_attachments),
                null);
            _attachments.SetPropertyIndexes(
                index: 3,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 4,
                storeGenerationIndex: -1);
            _attachments.SetCollectionAccessor<Message, List<Attachment>, Attachment>(
                List<Attachment> (Message entity) => MessageUnsafeAccessors._attachments(entity),
                (Message entity, List<Attachment> collection) => MessageUnsafeAccessors._attachments(entity) = ((List<Attachment>)(collection)),
                (Message entity, List<Attachment> collection) => MessageUnsafeAccessors._attachments(entity) = ((List<Attachment>)(collection)),
                List<Attachment> (Message entity, Action<Message, List<Attachment>> setter) => ClrCollectionAccessorFactory.CreateAndSet<Message, List<Attachment>, List<Attachment>>(entity, setter),
                List<Attachment> () => new List<Attachment>());
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var messageId = runtimeEntityType.FindProperty("MessageId");
            var id1 = runtimeEntityType.FindProperty("Id1");
            var fileName = runtimeEntityType.FindProperty("FileName");
            var id = runtimeEntityType.FindProperty("Id");
            var mediaType = runtimeEntityType.FindProperty("MediaType");
            var size = runtimeEntityType.FindProperty("Size");
            var sourceUrl = runtimeEntityType.FindProperty("SourceUrl");
            var key = runtimeEntityType.FindKey(new[] { messageId, id1 });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateCompositeFactory(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<IReadOnlyList<object>>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((Attachment)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, int, string, ulong, string, long, string>(((ValueComparer<ulong>)(((IProperty)messageId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(messageId)), ((ValueComparer<int>)(((IProperty)id1).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(id1)), (source.GetCurrentValue<string>(fileName) == null ? null : ((ValueComparer<string>)(((IProperty)fileName).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(fileName))), ((ValueComparer<ulong>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)), (source.GetCurrentValue<string>(mediaType) == null ? null : ((ValueComparer<string>)(((IProperty)mediaType).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(mediaType))), ((ValueComparer<long>)(((IProperty)size).GetValueComparer())).Snapshot(source.GetCurrentValue<long>(size)), (source.GetCurrentValue<string>(sourceUrl) == null ? null : ((ValueComparer<string>)(((IProperty)sourceUrl).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(sourceUrl))))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<ulong, int>(((ValueComparer<ulong>)(((IProperty)messageId).GetValueComparer())).Snapshot(default(ulong)), ((ValueComparer<int>)(((IProperty)id1).GetValueComparer())).Snapshot(default(int))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<ulong, int>(default(ulong), default(int)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => ((ISnapshot)(new Snapshot<ulong, int>((source.ContainsKey("MessageId") ? ((ulong)(source["MessageId"])) : 0UL), (source.ContainsKey("Id1") ? ((int)(source["Id1"])) : 0)))));
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<ulong, int>(default(ulong), default(int)))));
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((Attachment)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, int>(((ValueComparer<ulong>)(((IProperty)messageId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(messageId)), ((ValueComparer<int>)(((IProperty)id1).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<int>(id1)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 7,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 7,
                shadowCount: 2,
                relationshipCount: 2,
                storeGeneratedCount: 2);
            runtimeEntityType.AddAnnotation("Mongo:ElementName", "Attachments");

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
