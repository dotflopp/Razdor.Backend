// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using MongoDB.EntityFrameworkCore.Storage;
using Razdor.Messages.Domain;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Razdor.Messages.Infrastructure.DataAccess
{
    [EntityFrameworkInternal]
    public partial class EmbedFooterEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Razdor.Messages.Domain.EmbedFooter",
                typeof(EmbedFooter),
                baseEntityType,
                propertyCount: 5,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var embedMessageId = runtimeEntityType.AddProperty(
                "EmbedMessageId",
                typeof(ulong),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0ul);
            embedMessageId.SetAccessors(
                ulong (InternalEntityEntry entry) => entry.ReadShadowValue<ulong>(0),
                ulong (InternalEntityEntry entry) => entry.ReadShadowValue<ulong>(0),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(embedMessageId, 0),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(embedMessageId, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            embedMessageId.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: 0,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            embedMessageId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));
            embedMessageId.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(embedMessageId));

            var embedId = runtimeEntityType.AddProperty(
                "EmbedId",
                typeof(ulong),
                sentinel: 0ul);
            embedId.SetAccessors(
                ulong (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(1) ? entry.ReadStoreGeneratedValue<ulong>(0) : (entry.FlaggedAsTemporary(1) && entry.ReadShadowValue<ulong>(1) == 0UL ? entry.ReadTemporaryValue<ulong>(0) : entry.ReadShadowValue<ulong>(1))),
                ulong (InternalEntityEntry entry) => entry.ReadShadowValue<ulong>(1),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(embedId, 1),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(embedId, 1),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            embedId.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: 1,
                relationshipIndex: 1,
                storeGenerationIndex: 0);
            embedId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));
            embedId.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(embedId));

            var imageUrl = runtimeEntityType.AddProperty(
                "ImageUrl",
                typeof(string),
                propertyInfo: typeof(EmbedFooter).GetProperty("ImageUrl", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EmbedFooter).GetField("<ImageUrl>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            imageUrl.SetGetter(
                string (EmbedFooter entity) => EmbedFooterUnsafeAccessors.ImageUrl(entity),
                bool (EmbedFooter entity) => EmbedFooterUnsafeAccessors.ImageUrl(entity) == null,
                string (EmbedFooter instance) => EmbedFooterUnsafeAccessors.ImageUrl(instance),
                bool (EmbedFooter instance) => EmbedFooterUnsafeAccessors.ImageUrl(instance) == null);
            imageUrl.SetSetter(
                (EmbedFooter entity, string value) => EmbedFooterUnsafeAccessors.ImageUrl(entity) = value);
            imageUrl.SetMaterializationSetter(
                (EmbedFooter entity, string value) => EmbedFooterUnsafeAccessors.ImageUrl(entity) = value);
            imageUrl.SetAccessors(
                string (InternalEntityEntry entry) => EmbedFooterUnsafeAccessors.ImageUrl(((EmbedFooter)(entry.Entity))),
                string (InternalEntityEntry entry) => EmbedFooterUnsafeAccessors.ImageUrl(((EmbedFooter)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(imageUrl, 2),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(imageUrl),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            imageUrl.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            imageUrl.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string));

            var timestamp = runtimeEntityType.AddProperty(
                "Timestamp",
                typeof(DateTimeOffset?),
                propertyInfo: typeof(EmbedFooter).GetProperty("Timestamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EmbedFooter).GetField("<Timestamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            timestamp.SetGetter(
                DateTimeOffset? (EmbedFooter entity) => EmbedFooterUnsafeAccessors.Timestamp(entity),
                bool (EmbedFooter entity) => !(EmbedFooterUnsafeAccessors.Timestamp(entity).HasValue),
                DateTimeOffset? (EmbedFooter instance) => EmbedFooterUnsafeAccessors.Timestamp(instance),
                bool (EmbedFooter instance) => !(EmbedFooterUnsafeAccessors.Timestamp(instance).HasValue));
            timestamp.SetSetter(
                (EmbedFooter entity, DateTimeOffset? value) => EmbedFooterUnsafeAccessors.Timestamp(entity) = value);
            timestamp.SetMaterializationSetter(
                (EmbedFooter entity, DateTimeOffset? value) => EmbedFooterUnsafeAccessors.Timestamp(entity) = value);
            timestamp.SetAccessors(
                DateTimeOffset? (InternalEntityEntry entry) => EmbedFooterUnsafeAccessors.Timestamp(((EmbedFooter)(entry.Entity))),
                DateTimeOffset? (InternalEntityEntry entry) => EmbedFooterUnsafeAccessors.Timestamp(((EmbedFooter)(entry.Entity))),
                DateTimeOffset? (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset?>(timestamp, 3),
                DateTimeOffset? (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset?>(timestamp),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            timestamp.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            timestamp.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                clrType: typeof(DateTimeOffset));
            timestamp.SetComparer(new NullableValueComparer<DateTimeOffset>(timestamp.TypeMapping.Comparer));
            timestamp.SetKeyComparer(new NullableValueComparer<DateTimeOffset>(timestamp.TypeMapping.KeyComparer));

            var title = runtimeEntityType.AddProperty(
                "Title",
                typeof(string),
                propertyInfo: typeof(EmbedFooter).GetProperty("Title", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EmbedFooter).GetField("<Title>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            title.SetGetter(
                string (EmbedFooter entity) => EmbedFooterUnsafeAccessors.Title(entity),
                bool (EmbedFooter entity) => EmbedFooterUnsafeAccessors.Title(entity) == null,
                string (EmbedFooter instance) => EmbedFooterUnsafeAccessors.Title(instance),
                bool (EmbedFooter instance) => EmbedFooterUnsafeAccessors.Title(instance) == null);
            title.SetSetter(
                (EmbedFooter entity, string value) => EmbedFooterUnsafeAccessors.Title(entity) = value);
            title.SetMaterializationSetter(
                (EmbedFooter entity, string value) => EmbedFooterUnsafeAccessors.Title(entity) = value);
            title.SetAccessors(
                string (InternalEntityEntry entry) => EmbedFooterUnsafeAccessors.Title(((EmbedFooter)(entry.Entity))),
                string (InternalEntityEntry entry) => EmbedFooterUnsafeAccessors.Title(((EmbedFooter)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(title, 4),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(title),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            title.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            title.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string));

            var key = runtimeEntityType.AddKey(
                new[] { embedMessageId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { embedId },
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EmbedId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                unique: true,
                required: true,
                ownership: true);

            var footer = principalEntityType.AddNavigation("Footer",
                runtimeForeignKey,
                onDependent: false,
                typeof(EmbedFooter),
                propertyInfo: typeof(Embed).GetProperty("Footer", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Embed).GetField("<Footer>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                eagerLoaded: true);

            footer.SetGetter(
                EmbedFooter (Embed entity) => EmbedUnsafeAccessors.Footer(entity),
                bool (Embed entity) => EmbedUnsafeAccessors.Footer(entity) == null,
                EmbedFooter (Embed instance) => EmbedUnsafeAccessors.Footer(instance),
                bool (Embed instance) => EmbedUnsafeAccessors.Footer(instance) == null);
            footer.SetSetter(
                (Embed entity, EmbedFooter value) => EmbedUnsafeAccessors.Footer(entity) = value);
            footer.SetMaterializationSetter(
                (Embed entity, EmbedFooter value) => EmbedUnsafeAccessors.Footer(entity) = value);
            footer.SetAccessors(
                EmbedFooter (InternalEntityEntry entry) => EmbedUnsafeAccessors.Footer(((Embed)(entry.Entity))),
                EmbedFooter (InternalEntityEntry entry) => EmbedUnsafeAccessors.Footer(((Embed)(entry.Entity))),
                null,
                EmbedFooter (InternalEntityEntry entry) => entry.GetCurrentValue<EmbedFooter>(footer),
                null);
            footer.SetPropertyIndexes(
                index: 1,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 2,
                storeGenerationIndex: -1);
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var embedMessageId = runtimeEntityType.FindProperty("EmbedMessageId");
            var embedId = runtimeEntityType.FindProperty("EmbedId");
            var imageUrl = runtimeEntityType.FindProperty("ImageUrl");
            var timestamp = runtimeEntityType.FindProperty("Timestamp");
            var title = runtimeEntityType.FindProperty("Title");
            var key = runtimeEntityType.FindKey(new[] { embedMessageId });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<ulong>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<ulong>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((EmbedFooter)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, ulong, string, DateTimeOffset?, string>(((ValueComparer<ulong>)(((IProperty)embedMessageId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(embedMessageId)), ((ValueComparer<ulong>)(((IProperty)embedId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(embedId)), (source.GetCurrentValue<string>(imageUrl) == null ? null : ((ValueComparer<string>)(((IProperty)imageUrl).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(imageUrl))), (source.GetCurrentValue<DateTimeOffset?>(timestamp) == null ? null : ((ValueComparer<DateTimeOffset?>)(((IProperty)timestamp).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTimeOffset?>(timestamp))), (source.GetCurrentValue<string>(title) == null ? null : ((ValueComparer<string>)(((IProperty)title).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(title))))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<ulong>(((ValueComparer<ulong>)(((IProperty)embedId).GetValueComparer())).Snapshot(default(ulong))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<ulong>(default(ulong)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => ((ISnapshot)(new Snapshot<ulong, ulong>((source.ContainsKey("EmbedMessageId") ? ((ulong)(source["EmbedMessageId"])) : 0UL), (source.ContainsKey("EmbedId") ? ((ulong)(source["EmbedId"])) : 0UL)))));
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<ulong, ulong>(default(ulong), default(ulong)))));
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((EmbedFooter)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, ulong>(((ValueComparer<ulong>)(((IProperty)embedMessageId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(embedMessageId)), ((ValueComparer<ulong>)(((IProperty)embedId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(embedId)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 5,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 5,
                shadowCount: 2,
                relationshipCount: 2,
                storeGeneratedCount: 1);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
