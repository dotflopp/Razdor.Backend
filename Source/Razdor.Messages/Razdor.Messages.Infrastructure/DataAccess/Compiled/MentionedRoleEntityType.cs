// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using MongoDB.EntityFrameworkCore.Storage;
using Razdor.Messages.Domain.Mentioning;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Razdor.Messages.Infrastructure.DataAccess
{
    [EntityFrameworkInternal]
    public partial class MentionedRoleEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Razdor.Messages.Domain.Mentioning.Mentions._roles#MentionedRole",
                typeof(MentionedRole),
                baseEntityType,
                sharedClrType: true,
                propertyCount: 4,
                foreignKeyCount: 1,
                keyCount: 1);

            var mentionsId = runtimeEntityType.AddProperty(
                "MentionsId",
                typeof(ulong),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0ul);
            mentionsId.SetAccessors(
                ulong (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<ulong>(0) : (entry.FlaggedAsTemporary(0) && entry.ReadShadowValue<ulong>(0) == 0UL ? entry.ReadTemporaryValue<ulong>(0) : entry.ReadShadowValue<ulong>(0))),
                ulong (InternalEntityEntry entry) => entry.ReadShadowValue<ulong>(0),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(mentionsId, 0),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(mentionsId, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            mentionsId.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: 0,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            mentionsId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));
            mentionsId.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(mentionsId));

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.SetAccessors(
                int (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(1) ? entry.ReadStoreGeneratedValue<int>(1) : (entry.FlaggedAsTemporary(1) && entry.ReadShadowValue<int>(1) == 0 ? entry.ReadTemporaryValue<int>(1) : entry.ReadShadowValue<int>(1))),
                int (InternalEntityEntry entry) => entry.ReadShadowValue<int>(1),
                int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(id, 1),
                int (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(id, 1),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            id.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: 1,
                relationshipIndex: 1,
                storeGenerationIndex: 1);
            id.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                clrType: typeof(int));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(id));

            var communityId = runtimeEntityType.AddProperty(
                "CommunityId",
                typeof(ulong),
                propertyInfo: typeof(MentionedRole).GetProperty("CommunityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MentionedRole).GetField("<CommunityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0ul);
            communityId.SetGetter(
                ulong (MentionedRole entity) => MentionedRoleUnsafeAccessors.CommunityId(entity),
                bool (MentionedRole entity) => MentionedRoleUnsafeAccessors.CommunityId(entity) == 0UL,
                ulong (MentionedRole instance) => MentionedRoleUnsafeAccessors.CommunityId(instance),
                bool (MentionedRole instance) => MentionedRoleUnsafeAccessors.CommunityId(instance) == 0UL);
            communityId.SetSetter(
                (MentionedRole entity, ulong value) => MentionedRoleUnsafeAccessors.CommunityId(entity) = value);
            communityId.SetMaterializationSetter(
                (MentionedRole entity, ulong value) => MentionedRoleUnsafeAccessors.CommunityId(entity) = value);
            communityId.SetAccessors(
                ulong (InternalEntityEntry entry) => MentionedRoleUnsafeAccessors.CommunityId(((MentionedRole)(entry.Entity))),
                ulong (InternalEntityEntry entry) => MentionedRoleUnsafeAccessors.CommunityId(((MentionedRole)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(communityId, 2),
                ulong (InternalEntityEntry entry) => entry.GetCurrentValue<ulong>(communityId),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            communityId.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            communityId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));

            var roleId = runtimeEntityType.AddProperty(
                "RoleId",
                typeof(ulong),
                propertyInfo: typeof(MentionedRole).GetProperty("RoleId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MentionedRole).GetField("<RoleId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0ul);
            roleId.SetGetter(
                ulong (MentionedRole entity) => MentionedRoleUnsafeAccessors.RoleId(entity),
                bool (MentionedRole entity) => MentionedRoleUnsafeAccessors.RoleId(entity) == 0UL,
                ulong (MentionedRole instance) => MentionedRoleUnsafeAccessors.RoleId(instance),
                bool (MentionedRole instance) => MentionedRoleUnsafeAccessors.RoleId(instance) == 0UL);
            roleId.SetSetter(
                (MentionedRole entity, ulong value) => MentionedRoleUnsafeAccessors.RoleId(entity) = value);
            roleId.SetMaterializationSetter(
                (MentionedRole entity, ulong value) => MentionedRoleUnsafeAccessors.RoleId(entity) = value);
            roleId.SetAccessors(
                ulong (InternalEntityEntry entry) => MentionedRoleUnsafeAccessors.RoleId(((MentionedRole)(entry.Entity))),
                ulong (InternalEntityEntry entry) => MentionedRoleUnsafeAccessors.RoleId(((MentionedRole)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(roleId, 3),
                ulong (InternalEntityEntry entry) => entry.GetCurrentValue<ulong>(roleId),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            roleId.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            roleId.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));

            var key = runtimeEntityType.AddKey(
                new[] { mentionsId, id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MentionsId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true,
                ownership: true);

            var _roles = principalEntityType.AddNavigation("_roles",
                runtimeForeignKey,
                onDependent: false,
                typeof(IReadOnlyCollection<MentionedRole>),
                fieldInfo: typeof(Mentions).GetField("_roles", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                eagerLoaded: true);

            _roles.SetGetter(
                IReadOnlyCollection<MentionedRole> (Mentions entity) => MentionsUnsafeAccessors._roles(entity),
                bool (Mentions entity) => MentionsUnsafeAccessors._roles(entity) == null,
                IReadOnlyCollection<MentionedRole> (Mentions instance) => MentionsUnsafeAccessors._roles(instance),
                bool (Mentions instance) => MentionsUnsafeAccessors._roles(instance) == null);
            _roles.SetSetter(
                (Mentions entity, IReadOnlyCollection<MentionedRole> value) => MentionsUnsafeAccessors._roles(entity) = value);
            _roles.SetMaterializationSetter(
                (Mentions entity, IReadOnlyCollection<MentionedRole> value) => MentionsUnsafeAccessors._roles(entity) = value);
            _roles.SetAccessors(
                IReadOnlyCollection<MentionedRole> (InternalEntityEntry entry) => MentionsUnsafeAccessors._roles(((Mentions)(entry.Entity))),
                IReadOnlyCollection<MentionedRole> (InternalEntityEntry entry) => MentionsUnsafeAccessors._roles(((Mentions)(entry.Entity))),
                null,
                IReadOnlyCollection<MentionedRole> (InternalEntityEntry entry) => entry.GetCurrentValue<IReadOnlyCollection<MentionedRole>>(_roles),
                null);
            _roles.SetPropertyIndexes(
                index: 1,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 2,
                storeGenerationIndex: -1);
            _roles.SetCollectionAccessor<Mentions, IReadOnlyCollection<MentionedRole>, MentionedRole>(
                IReadOnlyCollection<MentionedRole> (Mentions entity) => MentionsUnsafeAccessors._roles(entity),
                (Mentions entity, IReadOnlyCollection<MentionedRole> collection) => MentionsUnsafeAccessors._roles(entity) = ((IReadOnlyCollection<MentionedRole>)(collection)),
                (Mentions entity, IReadOnlyCollection<MentionedRole> collection) => MentionsUnsafeAccessors._roles(entity) = ((IReadOnlyCollection<MentionedRole>)(collection)),
                IReadOnlyCollection<MentionedRole> (Mentions entity, Action<Mentions, IReadOnlyCollection<MentionedRole>> setter) => ClrCollectionAccessorFactory.CreateAndSetHashSet<Mentions, IReadOnlyCollection<MentionedRole>, MentionedRole>(entity, setter),
                IReadOnlyCollection<MentionedRole> () => ((IReadOnlyCollection<MentionedRole>)(((ICollection<MentionedRole>)(new HashSet<MentionedRole>(ReferenceEqualityComparer.Instance))))));
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var mentionsId = runtimeEntityType.FindProperty("MentionsId");
            var id = runtimeEntityType.FindProperty("Id");
            var communityId = runtimeEntityType.FindProperty("CommunityId");
            var roleId = runtimeEntityType.FindProperty("RoleId");
            var key = runtimeEntityType.FindKey(new[] { mentionsId, id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateCompositeFactory(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<IReadOnlyList<object>>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((MentionedRole)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, int, ulong, ulong>(((ValueComparer<ulong>)(((IProperty)mentionsId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(mentionsId)), ((ValueComparer<int>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(id)), ((ValueComparer<ulong>)(((IProperty)communityId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(communityId)), ((ValueComparer<ulong>)(((IProperty)roleId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(roleId)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<ulong, int>(((ValueComparer<ulong>)(((IProperty)mentionsId).GetValueComparer())).Snapshot(default(ulong)), ((ValueComparer<int>)(((IProperty)id).GetValueComparer())).Snapshot(default(int))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<ulong, int>(default(ulong), default(int)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => ((ISnapshot)(new Snapshot<ulong, int>((source.ContainsKey("MentionsId") ? ((ulong)(source["MentionsId"])) : 0UL), (source.ContainsKey("Id") ? ((int)(source["Id"])) : 0)))));
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<ulong, int>(default(ulong), default(int)))));
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((MentionedRole)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, int>(((ValueComparer<ulong>)(((IProperty)mentionsId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(mentionsId)), ((ValueComparer<int>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<int>(id)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 4,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 4,
                shadowCount: 2,
                relationshipCount: 2,
                storeGeneratedCount: 2);
            runtimeEntityType.AddAnnotation("Mongo:ElementName", "Roles");

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
