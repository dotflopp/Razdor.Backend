// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using MongoDB.EntityFrameworkCore.Storage;
using Razdor.Messages.Domain;
using Razdor.Messages.Domain.Mentioning;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Razdor.Messages.Infrastructure.DataAccess
{
    [EntityFrameworkInternal]
    public partial class MentionsEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Razdor.Messages.Domain.Mentioning.Mentions",
                typeof(Mentions),
                baseEntityType,
                propertyCount: 2,
                navigationCount: 3,
                foreignKeyCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(ulong),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0ul);
            id.SetAccessors(
                ulong (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<ulong>(0) : (entry.FlaggedAsTemporary(0) && entry.ReadShadowValue<ulong>(0) == 0UL ? entry.ReadTemporaryValue<ulong>(0) : entry.ReadShadowValue<ulong>(0))),
                ulong (InternalEntityEntry entry) => entry.ReadShadowValue<ulong>(0),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(id, 0),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: 0,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            id.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                clrType: typeof(ulong));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(id));

            var mentionedEveryone = runtimeEntityType.AddProperty(
                "MentionedEveryone",
                typeof(bool),
                propertyInfo: typeof(Mentions).GetProperty("MentionedEveryone", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Mentions).GetField("<MentionedEveryone>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            mentionedEveryone.SetGetter(
                bool (Mentions entity) => MentionsUnsafeAccessors.MentionedEveryone(entity),
                bool (Mentions entity) => MentionsUnsafeAccessors.MentionedEveryone(entity) == false,
                bool (Mentions instance) => MentionsUnsafeAccessors.MentionedEveryone(instance),
                bool (Mentions instance) => MentionsUnsafeAccessors.MentionedEveryone(instance) == false);
            mentionedEveryone.SetSetter(
                (Mentions entity, bool value) => MentionsUnsafeAccessors.MentionedEveryone(entity) = value);
            mentionedEveryone.SetMaterializationSetter(
                (Mentions entity, bool value) => MentionsUnsafeAccessors.MentionedEveryone(entity) = value);
            mentionedEveryone.SetAccessors(
                bool (InternalEntityEntry entry) => MentionsUnsafeAccessors.MentionedEveryone(((Mentions)(entry.Entity))),
                bool (InternalEntityEntry entry) => MentionsUnsafeAccessors.MentionedEveryone(((Mentions)(entry.Entity))),
                bool (InternalEntityEntry entry) => entry.ReadOriginalValue<bool>(mentionedEveryone, 1),
                bool (InternalEntityEntry entry) => entry.GetCurrentValue<bool>(mentionedEveryone),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            mentionedEveryone.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            mentionedEveryone.TypeMapping = MongoTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                clrType: typeof(bool));

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("Id") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                unique: true,
                required: true,
                requiredDependent: true,
                ownership: true);

            var mentions = principalEntityType.AddNavigation("Mentions",
                runtimeForeignKey,
                onDependent: false,
                typeof(Mentions),
                propertyInfo: typeof(Message).GetProperty("Mentions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Message).GetField("<Mentions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                eagerLoaded: true);

            mentions.SetGetter(
                Mentions (Message entity) => MessageUnsafeAccessors.Mentions(entity),
                bool (Message entity) => MessageUnsafeAccessors.Mentions(entity) == null,
                Mentions (Message instance) => MessageUnsafeAccessors.Mentions(instance),
                bool (Message instance) => MessageUnsafeAccessors.Mentions(instance) == null);
            mentions.SetSetter(
                (Message entity, Mentions value) => MessageUnsafeAccessors.Mentions(entity) = value);
            mentions.SetMaterializationSetter(
                (Message entity, Mentions value) => MessageUnsafeAccessors.Mentions(entity) = value);
            mentions.SetAccessors(
                Mentions (InternalEntityEntry entry) => MessageUnsafeAccessors.Mentions(((Message)(entry.Entity))),
                Mentions (InternalEntityEntry entry) => MessageUnsafeAccessors.Mentions(((Message)(entry.Entity))),
                null,
                Mentions (InternalEntityEntry entry) => entry.GetCurrentValue<Mentions>(mentions),
                null);
            mentions.SetPropertyIndexes(
                index: 1,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 2,
                storeGenerationIndex: -1);
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var mentionedEveryone = runtimeEntityType.FindProperty("MentionedEveryone");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<ulong>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<ulong>(key));
            var _channels = runtimeEntityType.FindNavigation("_channels");
            var _roles = runtimeEntityType.FindNavigation("_roles");
            var _users = runtimeEntityType.FindNavigation("_users");
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((Mentions)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, bool>(((ValueComparer<ulong>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)), ((ValueComparer<bool>)(((IProperty)mentionedEveryone).GetValueComparer())).Snapshot(source.GetCurrentValue<bool>(mentionedEveryone)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<ulong>(((ValueComparer<ulong>)(((IProperty)id).GetValueComparer())).Snapshot(default(ulong))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<ulong>(default(ulong)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => ((ISnapshot)(new Snapshot<ulong>((source.ContainsKey("Id") ? ((ulong)(source["Id"])) : 0UL)))));
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<ulong>(default(ulong)))));
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((Mentions)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, object, object, object>(((ValueComparer<ulong>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)), SnapshotFactoryFactory.SnapshotCollection(MentionsUnsafeAccessors._channels(entity)), SnapshotFactoryFactory.SnapshotCollection(MentionsUnsafeAccessors._roles(entity)), SnapshotFactoryFactory.SnapshotCollection(MentionsUnsafeAccessors._users(entity)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 2,
                navigationCount: 3,
                complexPropertyCount: 0,
                originalValueCount: 2,
                shadowCount: 1,
                relationshipCount: 4,
                storeGeneratedCount: 1);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
